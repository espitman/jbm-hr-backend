// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/alibabacode"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// AlibabaCodeCreate is the builder for creating a AlibabaCode entity.
type AlibabaCodeCreate struct {
	config
	mutation *AlibabaCodeMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (acc *AlibabaCodeCreate) SetCode(s string) *AlibabaCodeCreate {
	acc.mutation.SetCode(s)
	return acc
}

// SetUsed sets the "used" field.
func (acc *AlibabaCodeCreate) SetUsed(b bool) *AlibabaCodeCreate {
	acc.mutation.SetUsed(b)
	return acc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (acc *AlibabaCodeCreate) SetNillableUsed(b *bool) *AlibabaCodeCreate {
	if b != nil {
		acc.SetUsed(*b)
	}
	return acc
}

// SetCreatedAt sets the "created_at" field.
func (acc *AlibabaCodeCreate) SetCreatedAt(t time.Time) *AlibabaCodeCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AlibabaCodeCreate) SetNillableCreatedAt(t *time.Time) *AlibabaCodeCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetAssignToUserID sets the "assign_to_user_id" field.
func (acc *AlibabaCodeCreate) SetAssignToUserID(i int) *AlibabaCodeCreate {
	acc.mutation.SetAssignToUserID(i)
	return acc
}

// SetNillableAssignToUserID sets the "assign_to_user_id" field if the given value is not nil.
func (acc *AlibabaCodeCreate) SetNillableAssignToUserID(i *int) *AlibabaCodeCreate {
	if i != nil {
		acc.SetAssignToUserID(*i)
	}
	return acc
}

// SetAssignAt sets the "assign_at" field.
func (acc *AlibabaCodeCreate) SetAssignAt(t time.Time) *AlibabaCodeCreate {
	acc.mutation.SetAssignAt(t)
	return acc
}

// SetNillableAssignAt sets the "assign_at" field if the given value is not nil.
func (acc *AlibabaCodeCreate) SetNillableAssignAt(t *time.Time) *AlibabaCodeCreate {
	if t != nil {
		acc.SetAssignAt(*t)
	}
	return acc
}

// SetType sets the "type" field.
func (acc *AlibabaCodeCreate) SetType(a alibabacode.Type) *AlibabaCodeCreate {
	acc.mutation.SetType(a)
	return acc
}

// SetAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID.
func (acc *AlibabaCodeCreate) SetAssignedToUserID(id int) *AlibabaCodeCreate {
	acc.mutation.SetAssignedToUserID(id)
	return acc
}

// SetNillableAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID if the given value is not nil.
func (acc *AlibabaCodeCreate) SetNillableAssignedToUserID(id *int) *AlibabaCodeCreate {
	if id != nil {
		acc = acc.SetAssignedToUserID(*id)
	}
	return acc
}

// SetAssignedToUser sets the "assigned_to_user" edge to the User entity.
func (acc *AlibabaCodeCreate) SetAssignedToUser(u *User) *AlibabaCodeCreate {
	return acc.SetAssignedToUserID(u.ID)
}

// Mutation returns the AlibabaCodeMutation object of the builder.
func (acc *AlibabaCodeCreate) Mutation() *AlibabaCodeMutation {
	return acc.mutation
}

// Save creates the AlibabaCode in the database.
func (acc *AlibabaCodeCreate) Save(ctx context.Context) (*AlibabaCode, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AlibabaCodeCreate) SaveX(ctx context.Context) *AlibabaCode {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AlibabaCodeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AlibabaCodeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AlibabaCodeCreate) defaults() {
	if _, ok := acc.mutation.Used(); !ok {
		v := alibabacode.DefaultUsed
		acc.mutation.SetUsed(v)
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := alibabacode.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AlibabaCodeCreate) check() error {
	if _, ok := acc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "AlibabaCode.code"`)}
	}
	if v, ok := acc.mutation.Code(); ok {
		if err := alibabacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "AlibabaCode.used"`)}
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AlibabaCode.created_at"`)}
	}
	if _, ok := acc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AlibabaCode.type"`)}
	}
	if v, ok := acc.mutation.GetType(); ok {
		if err := alibabacode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.type": %w`, err)}
		}
	}
	return nil
}

func (acc *AlibabaCodeCreate) sqlSave(ctx context.Context) (*AlibabaCode, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AlibabaCodeCreate) createSpec() (*AlibabaCode, *sqlgraph.CreateSpec) {
	var (
		_node = &AlibabaCode{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(alibabacode.Table, sqlgraph.NewFieldSpec(alibabacode.FieldID, field.TypeInt))
	)
	if value, ok := acc.mutation.Code(); ok {
		_spec.SetField(alibabacode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := acc.mutation.Used(); ok {
		_spec.SetField(alibabacode.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(alibabacode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.AssignAt(); ok {
		_spec.SetField(alibabacode.FieldAssignAt, field.TypeTime, value)
		_node.AssignAt = &value
	}
	if value, ok := acc.mutation.GetType(); ok {
		_spec.SetField(alibabacode.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := acc.mutation.AssignedToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alibabacode.AssignedToUserTable,
			Columns: []string{alibabacode.AssignedToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssignToUserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AlibabaCodeCreateBulk is the builder for creating many AlibabaCode entities in bulk.
type AlibabaCodeCreateBulk struct {
	config
	err      error
	builders []*AlibabaCodeCreate
}

// Save creates the AlibabaCode entities in the database.
func (accb *AlibabaCodeCreateBulk) Save(ctx context.Context) ([]*AlibabaCode, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AlibabaCode, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AlibabaCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AlibabaCodeCreateBulk) SaveX(ctx context.Context) []*AlibabaCode {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AlibabaCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AlibabaCodeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
