// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/department"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetTitle sets the "title" field.
func (du *DepartmentUpdate) SetTitle(s string) *DepartmentUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableTitle(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DepartmentUpdate) SetDescription(s string) *DepartmentUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableDescription(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// SetImage sets the "image" field.
func (du *DepartmentUpdate) SetImage(s string) *DepartmentUpdate {
	du.mutation.SetImage(s)
	return du
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableImage(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetImage(*s)
	}
	return du
}

// SetIcon sets the "icon" field.
func (du *DepartmentUpdate) SetIcon(s string) *DepartmentUpdate {
	du.mutation.SetIcon(s)
	return du
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableIcon(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetIcon(*s)
	}
	return du
}

// SetColor sets the "color" field.
func (du *DepartmentUpdate) SetColor(s string) *DepartmentUpdate {
	du.mutation.SetColor(s)
	return du
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableColor(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetColor(*s)
	}
	return du
}

// SetShortName sets the "shortName" field.
func (du *DepartmentUpdate) SetShortName(s string) *DepartmentUpdate {
	du.mutation.SetShortName(s)
	return du
}

// SetNillableShortName sets the "shortName" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableShortName(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetShortName(*s)
	}
	return du
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DepartmentUpdate) check() error {
	if v, ok := du.mutation.Title(); ok {
		if err := department.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Department.title": %w`, err)}
		}
	}
	if v, ok := du.mutation.Description(); ok {
		if err := department.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Department.description": %w`, err)}
		}
	}
	if v, ok := du.mutation.Image(); ok {
		if err := department.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Department.image": %w`, err)}
		}
	}
	if v, ok := du.mutation.Icon(); ok {
		if err := department.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Department.icon": %w`, err)}
		}
	}
	if v, ok := du.mutation.Color(); ok {
		if err := department.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Department.color": %w`, err)}
		}
	}
	if v, ok := du.mutation.ShortName(); ok {
		if err := department.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "shortName", err: fmt.Errorf(`ent: validator failed for field "Department.shortName": %w`, err)}
		}
	}
	return nil
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(department.FieldTitle, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if value, ok := du.mutation.Image(); ok {
		_spec.SetField(department.FieldImage, field.TypeString, value)
	}
	if value, ok := du.mutation.Icon(); ok {
		_spec.SetField(department.FieldIcon, field.TypeString, value)
	}
	if value, ok := du.mutation.Color(); ok {
		_spec.SetField(department.FieldColor, field.TypeString, value)
	}
	if value, ok := du.mutation.ShortName(); ok {
		_spec.SetField(department.FieldShortName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetTitle sets the "title" field.
func (duo *DepartmentUpdateOne) SetTitle(s string) *DepartmentUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableTitle(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DepartmentUpdateOne) SetDescription(s string) *DepartmentUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableDescription(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// SetImage sets the "image" field.
func (duo *DepartmentUpdateOne) SetImage(s string) *DepartmentUpdateOne {
	duo.mutation.SetImage(s)
	return duo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableImage(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetImage(*s)
	}
	return duo
}

// SetIcon sets the "icon" field.
func (duo *DepartmentUpdateOne) SetIcon(s string) *DepartmentUpdateOne {
	duo.mutation.SetIcon(s)
	return duo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableIcon(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetIcon(*s)
	}
	return duo
}

// SetColor sets the "color" field.
func (duo *DepartmentUpdateOne) SetColor(s string) *DepartmentUpdateOne {
	duo.mutation.SetColor(s)
	return duo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableColor(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetColor(*s)
	}
	return duo
}

// SetShortName sets the "shortName" field.
func (duo *DepartmentUpdateOne) SetShortName(s string) *DepartmentUpdateOne {
	duo.mutation.SetShortName(s)
	return duo
}

// SetNillableShortName sets the "shortName" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableShortName(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetShortName(*s)
	}
	return duo
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DepartmentUpdateOne) check() error {
	if v, ok := duo.mutation.Title(); ok {
		if err := department.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Department.title": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Description(); ok {
		if err := department.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Department.description": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Image(); ok {
		if err := department.ImageValidator(v); err != nil {
			return &ValidationError{Name: "image", err: fmt.Errorf(`ent: validator failed for field "Department.image": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Icon(); ok {
		if err := department.IconValidator(v); err != nil {
			return &ValidationError{Name: "icon", err: fmt.Errorf(`ent: validator failed for field "Department.icon": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Color(); ok {
		if err := department.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Department.color": %w`, err)}
		}
	}
	if v, ok := duo.mutation.ShortName(); ok {
		if err := department.ShortNameValidator(v); err != nil {
			return &ValidationError{Name: "shortName", err: fmt.Errorf(`ent: validator failed for field "Department.shortName": %w`, err)}
		}
	}
	return nil
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(department.FieldTitle, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(department.FieldDescription, field.TypeString, value)
	}
	if value, ok := duo.mutation.Image(); ok {
		_spec.SetField(department.FieldImage, field.TypeString, value)
	}
	if value, ok := duo.mutation.Icon(); ok {
		_spec.SetField(department.FieldIcon, field.TypeString, value)
	}
	if value, ok := duo.mutation.Color(); ok {
		_spec.SetField(department.FieldColor, field.TypeString, value)
	}
	if value, ok := duo.mutation.ShortName(); ok {
		_spec.SetField(department.FieldShortName, field.TypeString, value)
	}
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
