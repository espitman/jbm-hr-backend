// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/espitman/jbm-hr-backend/ent/alibabacode"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// AlibabaCode is the model entity for the AlibabaCode schema.
type AlibabaCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// The unique code for Alibaba access
	Code string `json:"code,omitempty"`
	// Whether the code has been used
	Used bool `json:"used,omitempty"`
	// When the code was created
	CreatedAt time.Time `json:"created_at,omitempty"`
	// The ID of the user this code is assigned to
	AssignToUserID *int `json:"assign_to_user_id,omitempty"`
	// When the code was assigned to a user
	AssignAt *time.Time `json:"assign_at,omitempty"`
	// The type of the code (price of the code)
	Type alibabacode.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AlibabaCodeQuery when eager-loading is set.
	Edges              AlibabaCodeEdges `json:"edges"`
	user_alibaba_codes *int
	selectValues       sql.SelectValues
}

// AlibabaCodeEdges holds the relations/edges for other nodes in the graph.
type AlibabaCodeEdges struct {
	// AssignedToUser holds the value of the assigned_to_user edge.
	AssignedToUser *User `json:"assigned_to_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssignedToUserOrErr returns the AssignedToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AlibabaCodeEdges) AssignedToUserOrErr() (*User, error) {
	if e.AssignedToUser != nil {
		return e.AssignedToUser, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "assigned_to_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AlibabaCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case alibabacode.FieldUsed:
			values[i] = new(sql.NullBool)
		case alibabacode.FieldID, alibabacode.FieldAssignToUserID:
			values[i] = new(sql.NullInt64)
		case alibabacode.FieldCode, alibabacode.FieldType:
			values[i] = new(sql.NullString)
		case alibabacode.FieldCreatedAt, alibabacode.FieldAssignAt:
			values[i] = new(sql.NullTime)
		case alibabacode.ForeignKeys[0]: // user_alibaba_codes
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AlibabaCode fields.
func (ac *AlibabaCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case alibabacode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int(value.Int64)
		case alibabacode.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ac.Code = value.String
			}
		case alibabacode.FieldUsed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				ac.Used = value.Bool
			}
		case alibabacode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case alibabacode.FieldAssignToUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assign_to_user_id", values[i])
			} else if value.Valid {
				ac.AssignToUserID = new(int)
				*ac.AssignToUserID = int(value.Int64)
			}
		case alibabacode.FieldAssignAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assign_at", values[i])
			} else if value.Valid {
				ac.AssignAt = new(time.Time)
				*ac.AssignAt = value.Time
			}
		case alibabacode.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ac.Type = alibabacode.Type(value.String)
			}
		case alibabacode.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_alibaba_codes", value)
			} else if value.Valid {
				ac.user_alibaba_codes = new(int)
				*ac.user_alibaba_codes = int(value.Int64)
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AlibabaCode.
// This includes values selected through modifiers, order, etc.
func (ac *AlibabaCode) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryAssignedToUser queries the "assigned_to_user" edge of the AlibabaCode entity.
func (ac *AlibabaCode) QueryAssignedToUser() *UserQuery {
	return NewAlibabaCodeClient(ac.config).QueryAssignedToUser(ac)
}

// Update returns a builder for updating this AlibabaCode.
// Note that you need to call AlibabaCode.Unwrap() before calling this method if this AlibabaCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AlibabaCode) Update() *AlibabaCodeUpdateOne {
	return NewAlibabaCodeClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AlibabaCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AlibabaCode) Unwrap() *AlibabaCode {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AlibabaCode is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AlibabaCode) String() string {
	var builder strings.Builder
	builder.WriteString("AlibabaCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("code=")
	builder.WriteString(ac.Code)
	builder.WriteString(", ")
	builder.WriteString("used=")
	builder.WriteString(fmt.Sprintf("%v", ac.Used))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ac.AssignToUserID; v != nil {
		builder.WriteString("assign_to_user_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ac.AssignAt; v != nil {
		builder.WriteString("assign_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ac.Type))
	builder.WriteByte(')')
	return builder.String()
}

// AlibabaCodes is a parsable slice of AlibabaCode.
type AlibabaCodes []*AlibabaCode
