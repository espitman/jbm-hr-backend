// Code generated by ent, DO NOT EDIT.

package digikalacode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the digikalacode type in the database.
	Label = "digikala_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUsedByUserID holds the string denoting the used_by_user_id field in the database.
	FieldUsedByUserID = "used_by_user_id"
	// FieldUsedAt holds the string denoting the used_at field in the database.
	FieldUsedAt = "used_at"
	// EdgeUsedBy holds the string denoting the used_by edge name in mutations.
	EdgeUsedBy = "used_by"
	// Table holds the table name of the digikalacode in the database.
	Table = "digikala_codes"
	// UsedByTable is the table that holds the used_by relation/edge.
	UsedByTable = "digikala_codes"
	// UsedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsedByInverseTable = "users"
	// UsedByColumn is the table column denoting the used_by relation/edge.
	UsedByColumn = "used_by_user_id"
)

// Columns holds all SQL columns for digikalacode fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldUsed,
	FieldCreatedAt,
	FieldUsedByUserID,
	FieldUsedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed bool
)

// OrderOption defines the ordering options for the DigikalaCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUsedByUserID orders the results by the used_by_user_id field.
func ByUsedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedByUserID, opts...).ToFunc()
}

// ByUsedAt orders the results by the used_at field.
func ByUsedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsedAt, opts...).ToFunc()
}

// ByUsedByField orders the results by used_by field.
func ByUsedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsedByStep(), sql.OrderByField(field, opts...))
	}
}
func newUsedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsedByTable, UsedByColumn),
	)
}
