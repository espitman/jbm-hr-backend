// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/hrteam"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
)

// HRTeamUpdate is the builder for updating HRTeam entities.
type HRTeamUpdate struct {
	config
	hooks    []Hook
	mutation *HRTeamMutation
}

// Where appends a list predicates to the HRTeamUpdate builder.
func (htu *HRTeamUpdate) Where(ps ...predicate.HRTeam) *HRTeamUpdate {
	htu.mutation.Where(ps...)
	return htu
}

// SetFullName sets the "full_name" field.
func (htu *HRTeamUpdate) SetFullName(s string) *HRTeamUpdate {
	htu.mutation.SetFullName(s)
	return htu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (htu *HRTeamUpdate) SetNillableFullName(s *string) *HRTeamUpdate {
	if s != nil {
		htu.SetFullName(*s)
	}
	return htu
}

// SetRole sets the "role" field.
func (htu *HRTeamUpdate) SetRole(s string) *HRTeamUpdate {
	htu.mutation.SetRole(s)
	return htu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (htu *HRTeamUpdate) SetNillableRole(s *string) *HRTeamUpdate {
	if s != nil {
		htu.SetRole(*s)
	}
	return htu
}

// SetEmail sets the "email" field.
func (htu *HRTeamUpdate) SetEmail(s string) *HRTeamUpdate {
	htu.mutation.SetEmail(s)
	return htu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (htu *HRTeamUpdate) SetNillableEmail(s *string) *HRTeamUpdate {
	if s != nil {
		htu.SetEmail(*s)
	}
	return htu
}

// SetPhone sets the "phone" field.
func (htu *HRTeamUpdate) SetPhone(s string) *HRTeamUpdate {
	htu.mutation.SetPhone(s)
	return htu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (htu *HRTeamUpdate) SetNillablePhone(s *string) *HRTeamUpdate {
	if s != nil {
		htu.SetPhone(*s)
	}
	return htu
}

// Mutation returns the HRTeamMutation object of the builder.
func (htu *HRTeamUpdate) Mutation() *HRTeamMutation {
	return htu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (htu *HRTeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, htu.sqlSave, htu.mutation, htu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htu *HRTeamUpdate) SaveX(ctx context.Context) int {
	affected, err := htu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (htu *HRTeamUpdate) Exec(ctx context.Context) error {
	_, err := htu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htu *HRTeamUpdate) ExecX(ctx context.Context) {
	if err := htu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htu *HRTeamUpdate) check() error {
	if v, ok := htu.mutation.FullName(); ok {
		if err := hrteam.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "HRTeam.full_name": %w`, err)}
		}
	}
	if v, ok := htu.mutation.Role(); ok {
		if err := hrteam.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "HRTeam.role": %w`, err)}
		}
	}
	if v, ok := htu.mutation.Email(); ok {
		if err := hrteam.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "HRTeam.email": %w`, err)}
		}
	}
	if v, ok := htu.mutation.Phone(); ok {
		if err := hrteam.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HRTeam.phone": %w`, err)}
		}
	}
	return nil
}

func (htu *HRTeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := htu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hrteam.Table, hrteam.Columns, sqlgraph.NewFieldSpec(hrteam.FieldID, field.TypeInt))
	if ps := htu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htu.mutation.FullName(); ok {
		_spec.SetField(hrteam.FieldFullName, field.TypeString, value)
	}
	if value, ok := htu.mutation.Role(); ok {
		_spec.SetField(hrteam.FieldRole, field.TypeString, value)
	}
	if value, ok := htu.mutation.Email(); ok {
		_spec.SetField(hrteam.FieldEmail, field.TypeString, value)
	}
	if value, ok := htu.mutation.Phone(); ok {
		_spec.SetField(hrteam.FieldPhone, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, htu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hrteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	htu.mutation.done = true
	return n, nil
}

// HRTeamUpdateOne is the builder for updating a single HRTeam entity.
type HRTeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HRTeamMutation
}

// SetFullName sets the "full_name" field.
func (htuo *HRTeamUpdateOne) SetFullName(s string) *HRTeamUpdateOne {
	htuo.mutation.SetFullName(s)
	return htuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (htuo *HRTeamUpdateOne) SetNillableFullName(s *string) *HRTeamUpdateOne {
	if s != nil {
		htuo.SetFullName(*s)
	}
	return htuo
}

// SetRole sets the "role" field.
func (htuo *HRTeamUpdateOne) SetRole(s string) *HRTeamUpdateOne {
	htuo.mutation.SetRole(s)
	return htuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (htuo *HRTeamUpdateOne) SetNillableRole(s *string) *HRTeamUpdateOne {
	if s != nil {
		htuo.SetRole(*s)
	}
	return htuo
}

// SetEmail sets the "email" field.
func (htuo *HRTeamUpdateOne) SetEmail(s string) *HRTeamUpdateOne {
	htuo.mutation.SetEmail(s)
	return htuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (htuo *HRTeamUpdateOne) SetNillableEmail(s *string) *HRTeamUpdateOne {
	if s != nil {
		htuo.SetEmail(*s)
	}
	return htuo
}

// SetPhone sets the "phone" field.
func (htuo *HRTeamUpdateOne) SetPhone(s string) *HRTeamUpdateOne {
	htuo.mutation.SetPhone(s)
	return htuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (htuo *HRTeamUpdateOne) SetNillablePhone(s *string) *HRTeamUpdateOne {
	if s != nil {
		htuo.SetPhone(*s)
	}
	return htuo
}

// Mutation returns the HRTeamMutation object of the builder.
func (htuo *HRTeamUpdateOne) Mutation() *HRTeamMutation {
	return htuo.mutation
}

// Where appends a list predicates to the HRTeamUpdate builder.
func (htuo *HRTeamUpdateOne) Where(ps ...predicate.HRTeam) *HRTeamUpdateOne {
	htuo.mutation.Where(ps...)
	return htuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (htuo *HRTeamUpdateOne) Select(field string, fields ...string) *HRTeamUpdateOne {
	htuo.fields = append([]string{field}, fields...)
	return htuo
}

// Save executes the query and returns the updated HRTeam entity.
func (htuo *HRTeamUpdateOne) Save(ctx context.Context) (*HRTeam, error) {
	return withHooks(ctx, htuo.sqlSave, htuo.mutation, htuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (htuo *HRTeamUpdateOne) SaveX(ctx context.Context) *HRTeam {
	node, err := htuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (htuo *HRTeamUpdateOne) Exec(ctx context.Context) error {
	_, err := htuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htuo *HRTeamUpdateOne) ExecX(ctx context.Context) {
	if err := htuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htuo *HRTeamUpdateOne) check() error {
	if v, ok := htuo.mutation.FullName(); ok {
		if err := hrteam.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "HRTeam.full_name": %w`, err)}
		}
	}
	if v, ok := htuo.mutation.Role(); ok {
		if err := hrteam.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "HRTeam.role": %w`, err)}
		}
	}
	if v, ok := htuo.mutation.Email(); ok {
		if err := hrteam.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "HRTeam.email": %w`, err)}
		}
	}
	if v, ok := htuo.mutation.Phone(); ok {
		if err := hrteam.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HRTeam.phone": %w`, err)}
		}
	}
	return nil
}

func (htuo *HRTeamUpdateOne) sqlSave(ctx context.Context) (_node *HRTeam, err error) {
	if err := htuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hrteam.Table, hrteam.Columns, sqlgraph.NewFieldSpec(hrteam.FieldID, field.TypeInt))
	id, ok := htuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HRTeam.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := htuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hrteam.FieldID)
		for _, f := range fields {
			if !hrteam.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hrteam.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := htuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := htuo.mutation.FullName(); ok {
		_spec.SetField(hrteam.FieldFullName, field.TypeString, value)
	}
	if value, ok := htuo.mutation.Role(); ok {
		_spec.SetField(hrteam.FieldRole, field.TypeString, value)
	}
	if value, ok := htuo.mutation.Email(); ok {
		_spec.SetField(hrteam.FieldEmail, field.TypeString, value)
	}
	if value, ok := htuo.mutation.Phone(); ok {
		_spec.SetField(hrteam.FieldPhone, field.TypeString, value)
	}
	_node = &HRTeam{config: htuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, htuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hrteam.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	htuo.mutation.done = true
	return _node, nil
}
