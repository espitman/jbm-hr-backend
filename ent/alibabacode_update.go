// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/alibabacode"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// AlibabaCodeUpdate is the builder for updating AlibabaCode entities.
type AlibabaCodeUpdate struct {
	config
	hooks    []Hook
	mutation *AlibabaCodeMutation
}

// Where appends a list predicates to the AlibabaCodeUpdate builder.
func (acu *AlibabaCodeUpdate) Where(ps ...predicate.AlibabaCode) *AlibabaCodeUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetCode sets the "code" field.
func (acu *AlibabaCodeUpdate) SetCode(s string) *AlibabaCodeUpdate {
	acu.mutation.SetCode(s)
	return acu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableCode(s *string) *AlibabaCodeUpdate {
	if s != nil {
		acu.SetCode(*s)
	}
	return acu
}

// SetUsed sets the "used" field.
func (acu *AlibabaCodeUpdate) SetUsed(b bool) *AlibabaCodeUpdate {
	acu.mutation.SetUsed(b)
	return acu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableUsed(b *bool) *AlibabaCodeUpdate {
	if b != nil {
		acu.SetUsed(*b)
	}
	return acu
}

// SetAssignToUserID sets the "assign_to_user_id" field.
func (acu *AlibabaCodeUpdate) SetAssignToUserID(i int) *AlibabaCodeUpdate {
	acu.mutation.SetAssignToUserID(i)
	return acu
}

// SetNillableAssignToUserID sets the "assign_to_user_id" field if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableAssignToUserID(i *int) *AlibabaCodeUpdate {
	if i != nil {
		acu.SetAssignToUserID(*i)
	}
	return acu
}

// ClearAssignToUserID clears the value of the "assign_to_user_id" field.
func (acu *AlibabaCodeUpdate) ClearAssignToUserID() *AlibabaCodeUpdate {
	acu.mutation.ClearAssignToUserID()
	return acu
}

// SetAssignAt sets the "assign_at" field.
func (acu *AlibabaCodeUpdate) SetAssignAt(t time.Time) *AlibabaCodeUpdate {
	acu.mutation.SetAssignAt(t)
	return acu
}

// SetNillableAssignAt sets the "assign_at" field if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableAssignAt(t *time.Time) *AlibabaCodeUpdate {
	if t != nil {
		acu.SetAssignAt(*t)
	}
	return acu
}

// ClearAssignAt clears the value of the "assign_at" field.
func (acu *AlibabaCodeUpdate) ClearAssignAt() *AlibabaCodeUpdate {
	acu.mutation.ClearAssignAt()
	return acu
}

// SetType sets the "type" field.
func (acu *AlibabaCodeUpdate) SetType(a alibabacode.Type) *AlibabaCodeUpdate {
	acu.mutation.SetType(a)
	return acu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableType(a *alibabacode.Type) *AlibabaCodeUpdate {
	if a != nil {
		acu.SetType(*a)
	}
	return acu
}

// SetAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID.
func (acu *AlibabaCodeUpdate) SetAssignedToUserID(id int) *AlibabaCodeUpdate {
	acu.mutation.SetAssignedToUserID(id)
	return acu
}

// SetNillableAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID if the given value is not nil.
func (acu *AlibabaCodeUpdate) SetNillableAssignedToUserID(id *int) *AlibabaCodeUpdate {
	if id != nil {
		acu = acu.SetAssignedToUserID(*id)
	}
	return acu
}

// SetAssignedToUser sets the "assigned_to_user" edge to the User entity.
func (acu *AlibabaCodeUpdate) SetAssignedToUser(u *User) *AlibabaCodeUpdate {
	return acu.SetAssignedToUserID(u.ID)
}

// Mutation returns the AlibabaCodeMutation object of the builder.
func (acu *AlibabaCodeUpdate) Mutation() *AlibabaCodeMutation {
	return acu.mutation
}

// ClearAssignedToUser clears the "assigned_to_user" edge to the User entity.
func (acu *AlibabaCodeUpdate) ClearAssignedToUser() *AlibabaCodeUpdate {
	acu.mutation.ClearAssignedToUser()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AlibabaCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AlibabaCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AlibabaCodeUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AlibabaCodeUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AlibabaCodeUpdate) check() error {
	if v, ok := acu.mutation.Code(); ok {
		if err := alibabacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.code": %w`, err)}
		}
	}
	if v, ok := acu.mutation.GetType(); ok {
		if err := alibabacode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.type": %w`, err)}
		}
	}
	return nil
}

func (acu *AlibabaCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(alibabacode.Table, alibabacode.Columns, sqlgraph.NewFieldSpec(alibabacode.FieldID, field.TypeInt))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.Code(); ok {
		_spec.SetField(alibabacode.FieldCode, field.TypeString, value)
	}
	if value, ok := acu.mutation.Used(); ok {
		_spec.SetField(alibabacode.FieldUsed, field.TypeBool, value)
	}
	if value, ok := acu.mutation.AssignAt(); ok {
		_spec.SetField(alibabacode.FieldAssignAt, field.TypeTime, value)
	}
	if acu.mutation.AssignAtCleared() {
		_spec.ClearField(alibabacode.FieldAssignAt, field.TypeTime)
	}
	if value, ok := acu.mutation.GetType(); ok {
		_spec.SetField(alibabacode.FieldType, field.TypeEnum, value)
	}
	if acu.mutation.AssignedToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alibabacode.AssignedToUserTable,
			Columns: []string{alibabacode.AssignedToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.AssignedToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alibabacode.AssignedToUserTable,
			Columns: []string{alibabacode.AssignedToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alibabacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AlibabaCodeUpdateOne is the builder for updating a single AlibabaCode entity.
type AlibabaCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AlibabaCodeMutation
}

// SetCode sets the "code" field.
func (acuo *AlibabaCodeUpdateOne) SetCode(s string) *AlibabaCodeUpdateOne {
	acuo.mutation.SetCode(s)
	return acuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableCode(s *string) *AlibabaCodeUpdateOne {
	if s != nil {
		acuo.SetCode(*s)
	}
	return acuo
}

// SetUsed sets the "used" field.
func (acuo *AlibabaCodeUpdateOne) SetUsed(b bool) *AlibabaCodeUpdateOne {
	acuo.mutation.SetUsed(b)
	return acuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableUsed(b *bool) *AlibabaCodeUpdateOne {
	if b != nil {
		acuo.SetUsed(*b)
	}
	return acuo
}

// SetAssignToUserID sets the "assign_to_user_id" field.
func (acuo *AlibabaCodeUpdateOne) SetAssignToUserID(i int) *AlibabaCodeUpdateOne {
	acuo.mutation.SetAssignToUserID(i)
	return acuo
}

// SetNillableAssignToUserID sets the "assign_to_user_id" field if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableAssignToUserID(i *int) *AlibabaCodeUpdateOne {
	if i != nil {
		acuo.SetAssignToUserID(*i)
	}
	return acuo
}

// ClearAssignToUserID clears the value of the "assign_to_user_id" field.
func (acuo *AlibabaCodeUpdateOne) ClearAssignToUserID() *AlibabaCodeUpdateOne {
	acuo.mutation.ClearAssignToUserID()
	return acuo
}

// SetAssignAt sets the "assign_at" field.
func (acuo *AlibabaCodeUpdateOne) SetAssignAt(t time.Time) *AlibabaCodeUpdateOne {
	acuo.mutation.SetAssignAt(t)
	return acuo
}

// SetNillableAssignAt sets the "assign_at" field if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableAssignAt(t *time.Time) *AlibabaCodeUpdateOne {
	if t != nil {
		acuo.SetAssignAt(*t)
	}
	return acuo
}

// ClearAssignAt clears the value of the "assign_at" field.
func (acuo *AlibabaCodeUpdateOne) ClearAssignAt() *AlibabaCodeUpdateOne {
	acuo.mutation.ClearAssignAt()
	return acuo
}

// SetType sets the "type" field.
func (acuo *AlibabaCodeUpdateOne) SetType(a alibabacode.Type) *AlibabaCodeUpdateOne {
	acuo.mutation.SetType(a)
	return acuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableType(a *alibabacode.Type) *AlibabaCodeUpdateOne {
	if a != nil {
		acuo.SetType(*a)
	}
	return acuo
}

// SetAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID.
func (acuo *AlibabaCodeUpdateOne) SetAssignedToUserID(id int) *AlibabaCodeUpdateOne {
	acuo.mutation.SetAssignedToUserID(id)
	return acuo
}

// SetNillableAssignedToUserID sets the "assigned_to_user" edge to the User entity by ID if the given value is not nil.
func (acuo *AlibabaCodeUpdateOne) SetNillableAssignedToUserID(id *int) *AlibabaCodeUpdateOne {
	if id != nil {
		acuo = acuo.SetAssignedToUserID(*id)
	}
	return acuo
}

// SetAssignedToUser sets the "assigned_to_user" edge to the User entity.
func (acuo *AlibabaCodeUpdateOne) SetAssignedToUser(u *User) *AlibabaCodeUpdateOne {
	return acuo.SetAssignedToUserID(u.ID)
}

// Mutation returns the AlibabaCodeMutation object of the builder.
func (acuo *AlibabaCodeUpdateOne) Mutation() *AlibabaCodeMutation {
	return acuo.mutation
}

// ClearAssignedToUser clears the "assigned_to_user" edge to the User entity.
func (acuo *AlibabaCodeUpdateOne) ClearAssignedToUser() *AlibabaCodeUpdateOne {
	acuo.mutation.ClearAssignedToUser()
	return acuo
}

// Where appends a list predicates to the AlibabaCodeUpdate builder.
func (acuo *AlibabaCodeUpdateOne) Where(ps ...predicate.AlibabaCode) *AlibabaCodeUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AlibabaCodeUpdateOne) Select(field string, fields ...string) *AlibabaCodeUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AlibabaCode entity.
func (acuo *AlibabaCodeUpdateOne) Save(ctx context.Context) (*AlibabaCode, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AlibabaCodeUpdateOne) SaveX(ctx context.Context) *AlibabaCode {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AlibabaCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AlibabaCodeUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AlibabaCodeUpdateOne) check() error {
	if v, ok := acuo.mutation.Code(); ok {
		if err := alibabacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.code": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.GetType(); ok {
		if err := alibabacode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "AlibabaCode.type": %w`, err)}
		}
	}
	return nil
}

func (acuo *AlibabaCodeUpdateOne) sqlSave(ctx context.Context) (_node *AlibabaCode, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(alibabacode.Table, alibabacode.Columns, sqlgraph.NewFieldSpec(alibabacode.FieldID, field.TypeInt))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AlibabaCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, alibabacode.FieldID)
		for _, f := range fields {
			if !alibabacode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != alibabacode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.Code(); ok {
		_spec.SetField(alibabacode.FieldCode, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Used(); ok {
		_spec.SetField(alibabacode.FieldUsed, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.AssignAt(); ok {
		_spec.SetField(alibabacode.FieldAssignAt, field.TypeTime, value)
	}
	if acuo.mutation.AssignAtCleared() {
		_spec.ClearField(alibabacode.FieldAssignAt, field.TypeTime)
	}
	if value, ok := acuo.mutation.GetType(); ok {
		_spec.SetField(alibabacode.FieldType, field.TypeEnum, value)
	}
	if acuo.mutation.AssignedToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alibabacode.AssignedToUserTable,
			Columns: []string{alibabacode.AssignedToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.AssignedToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   alibabacode.AssignedToUserTable,
			Columns: []string{alibabacode.AssignedToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AlibabaCode{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{alibabacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
