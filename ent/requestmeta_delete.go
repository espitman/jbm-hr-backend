// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
	"github.com/espitman/jbm-hr-backend/ent/requestmeta"
)

// RequestMetaDelete is the builder for deleting a RequestMeta entity.
type RequestMetaDelete struct {
	config
	hooks    []Hook
	mutation *RequestMetaMutation
}

// Where appends a list predicates to the RequestMetaDelete builder.
func (rmd *RequestMetaDelete) Where(ps ...predicate.RequestMeta) *RequestMetaDelete {
	rmd.mutation.Where(ps...)
	return rmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rmd *RequestMetaDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rmd.sqlExec, rmd.mutation, rmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rmd *RequestMetaDelete) ExecX(ctx context.Context) int {
	n, err := rmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rmd *RequestMetaDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(requestmeta.Table, sqlgraph.NewFieldSpec(requestmeta.FieldID, field.TypeInt))
	if ps := rmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rmd.mutation.done = true
	return affected, err
}

// RequestMetaDeleteOne is the builder for deleting a single RequestMeta entity.
type RequestMetaDeleteOne struct {
	rmd *RequestMetaDelete
}

// Where appends a list predicates to the RequestMetaDelete builder.
func (rmdo *RequestMetaDeleteOne) Where(ps ...predicate.RequestMeta) *RequestMetaDeleteOne {
	rmdo.rmd.mutation.Where(ps...)
	return rmdo
}

// Exec executes the deletion query.
func (rmdo *RequestMetaDeleteOne) Exec(ctx context.Context) error {
	n, err := rmdo.rmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{requestmeta.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rmdo *RequestMetaDeleteOne) ExecX(ctx context.Context) {
	if err := rmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
