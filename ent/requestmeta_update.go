// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
	"github.com/espitman/jbm-hr-backend/ent/request"
	"github.com/espitman/jbm-hr-backend/ent/requestmeta"
)

// RequestMetaUpdate is the builder for updating RequestMeta entities.
type RequestMetaUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMetaMutation
}

// Where appends a list predicates to the RequestMetaUpdate builder.
func (rmu *RequestMetaUpdate) Where(ps ...predicate.RequestMeta) *RequestMetaUpdate {
	rmu.mutation.Where(ps...)
	return rmu
}

// SetRequestID sets the "request_id" field.
func (rmu *RequestMetaUpdate) SetRequestID(i int) *RequestMetaUpdate {
	rmu.mutation.SetRequestID(i)
	return rmu
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (rmu *RequestMetaUpdate) SetNillableRequestID(i *int) *RequestMetaUpdate {
	if i != nil {
		rmu.SetRequestID(*i)
	}
	return rmu
}

// SetKey sets the "key" field.
func (rmu *RequestMetaUpdate) SetKey(s string) *RequestMetaUpdate {
	rmu.mutation.SetKey(s)
	return rmu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rmu *RequestMetaUpdate) SetNillableKey(s *string) *RequestMetaUpdate {
	if s != nil {
		rmu.SetKey(*s)
	}
	return rmu
}

// SetValue sets the "value" field.
func (rmu *RequestMetaUpdate) SetValue(s string) *RequestMetaUpdate {
	rmu.mutation.SetValue(s)
	return rmu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (rmu *RequestMetaUpdate) SetNillableValue(s *string) *RequestMetaUpdate {
	if s != nil {
		rmu.SetValue(*s)
	}
	return rmu
}

// SetRequest sets the "request" edge to the Request entity.
func (rmu *RequestMetaUpdate) SetRequest(r *Request) *RequestMetaUpdate {
	return rmu.SetRequestID(r.ID)
}

// Mutation returns the RequestMetaMutation object of the builder.
func (rmu *RequestMetaUpdate) Mutation() *RequestMetaMutation {
	return rmu.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rmu *RequestMetaUpdate) ClearRequest() *RequestMetaUpdate {
	rmu.mutation.ClearRequest()
	return rmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rmu *RequestMetaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rmu.sqlSave, rmu.mutation, rmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmu *RequestMetaUpdate) SaveX(ctx context.Context) int {
	affected, err := rmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rmu *RequestMetaUpdate) Exec(ctx context.Context) error {
	_, err := rmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmu *RequestMetaUpdate) ExecX(ctx context.Context) {
	if err := rmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmu *RequestMetaUpdate) check() error {
	if v, ok := rmu.mutation.Key(); ok {
		if err := requestmeta.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "RequestMeta.key": %w`, err)}
		}
	}
	if v, ok := rmu.mutation.Value(); ok {
		if err := requestmeta.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "RequestMeta.value": %w`, err)}
		}
	}
	if rmu.mutation.RequestCleared() && len(rmu.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RequestMeta.request"`)
	}
	return nil
}

func (rmu *RequestMetaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(requestmeta.Table, requestmeta.Columns, sqlgraph.NewFieldSpec(requestmeta.FieldID, field.TypeInt))
	if ps := rmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmu.mutation.Key(); ok {
		_spec.SetField(requestmeta.FieldKey, field.TypeString, value)
	}
	if value, ok := rmu.mutation.Value(); ok {
		_spec.SetField(requestmeta.FieldValue, field.TypeString, value)
	}
	if rmu.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestmeta.RequestTable,
			Columns: []string{requestmeta.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmu.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestmeta.RequestTable,
			Columns: []string{requestmeta.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rmu.mutation.done = true
	return n, nil
}

// RequestMetaUpdateOne is the builder for updating a single RequestMeta entity.
type RequestMetaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMetaMutation
}

// SetRequestID sets the "request_id" field.
func (rmuo *RequestMetaUpdateOne) SetRequestID(i int) *RequestMetaUpdateOne {
	rmuo.mutation.SetRequestID(i)
	return rmuo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (rmuo *RequestMetaUpdateOne) SetNillableRequestID(i *int) *RequestMetaUpdateOne {
	if i != nil {
		rmuo.SetRequestID(*i)
	}
	return rmuo
}

// SetKey sets the "key" field.
func (rmuo *RequestMetaUpdateOne) SetKey(s string) *RequestMetaUpdateOne {
	rmuo.mutation.SetKey(s)
	return rmuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rmuo *RequestMetaUpdateOne) SetNillableKey(s *string) *RequestMetaUpdateOne {
	if s != nil {
		rmuo.SetKey(*s)
	}
	return rmuo
}

// SetValue sets the "value" field.
func (rmuo *RequestMetaUpdateOne) SetValue(s string) *RequestMetaUpdateOne {
	rmuo.mutation.SetValue(s)
	return rmuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (rmuo *RequestMetaUpdateOne) SetNillableValue(s *string) *RequestMetaUpdateOne {
	if s != nil {
		rmuo.SetValue(*s)
	}
	return rmuo
}

// SetRequest sets the "request" edge to the Request entity.
func (rmuo *RequestMetaUpdateOne) SetRequest(r *Request) *RequestMetaUpdateOne {
	return rmuo.SetRequestID(r.ID)
}

// Mutation returns the RequestMetaMutation object of the builder.
func (rmuo *RequestMetaUpdateOne) Mutation() *RequestMetaMutation {
	return rmuo.mutation
}

// ClearRequest clears the "request" edge to the Request entity.
func (rmuo *RequestMetaUpdateOne) ClearRequest() *RequestMetaUpdateOne {
	rmuo.mutation.ClearRequest()
	return rmuo
}

// Where appends a list predicates to the RequestMetaUpdate builder.
func (rmuo *RequestMetaUpdateOne) Where(ps ...predicate.RequestMeta) *RequestMetaUpdateOne {
	rmuo.mutation.Where(ps...)
	return rmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rmuo *RequestMetaUpdateOne) Select(field string, fields ...string) *RequestMetaUpdateOne {
	rmuo.fields = append([]string{field}, fields...)
	return rmuo
}

// Save executes the query and returns the updated RequestMeta entity.
func (rmuo *RequestMetaUpdateOne) Save(ctx context.Context) (*RequestMeta, error) {
	return withHooks(ctx, rmuo.sqlSave, rmuo.mutation, rmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rmuo *RequestMetaUpdateOne) SaveX(ctx context.Context) *RequestMeta {
	node, err := rmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rmuo *RequestMetaUpdateOne) Exec(ctx context.Context) error {
	_, err := rmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmuo *RequestMetaUpdateOne) ExecX(ctx context.Context) {
	if err := rmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmuo *RequestMetaUpdateOne) check() error {
	if v, ok := rmuo.mutation.Key(); ok {
		if err := requestmeta.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "RequestMeta.key": %w`, err)}
		}
	}
	if v, ok := rmuo.mutation.Value(); ok {
		if err := requestmeta.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "RequestMeta.value": %w`, err)}
		}
	}
	if rmuo.mutation.RequestCleared() && len(rmuo.mutation.RequestIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RequestMeta.request"`)
	}
	return nil
}

func (rmuo *RequestMetaUpdateOne) sqlSave(ctx context.Context) (_node *RequestMeta, err error) {
	if err := rmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(requestmeta.Table, requestmeta.Columns, sqlgraph.NewFieldSpec(requestmeta.FieldID, field.TypeInt))
	id, ok := rmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RequestMeta.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestmeta.FieldID)
		for _, f := range fields {
			if !requestmeta.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requestmeta.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rmuo.mutation.Key(); ok {
		_spec.SetField(requestmeta.FieldKey, field.TypeString, value)
	}
	if value, ok := rmuo.mutation.Value(); ok {
		_spec.SetField(requestmeta.FieldValue, field.TypeString, value)
	}
	if rmuo.mutation.RequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestmeta.RequestTable,
			Columns: []string{requestmeta.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rmuo.mutation.RequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   requestmeta.RequestTable,
			Columns: []string{requestmeta.RequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RequestMeta{config: rmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestmeta.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rmuo.mutation.done = true
	return _node, nil
}
