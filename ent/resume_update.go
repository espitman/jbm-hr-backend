// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
	"github.com/espitman/jbm-hr-backend/ent/resume"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// ResumeUpdate is the builder for updating Resume entities.
type ResumeUpdate struct {
	config
	hooks    []Hook
	mutation *ResumeMutation
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ru *ResumeUpdate) Where(ps ...predicate.Resume) *ResumeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetIntroducedName sets the "introduced_name" field.
func (ru *ResumeUpdate) SetIntroducedName(s string) *ResumeUpdate {
	ru.mutation.SetIntroducedName(s)
	return ru
}

// SetNillableIntroducedName sets the "introduced_name" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableIntroducedName(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetIntroducedName(*s)
	}
	return ru
}

// SetIntroducedPhone sets the "introduced_phone" field.
func (ru *ResumeUpdate) SetIntroducedPhone(s string) *ResumeUpdate {
	ru.mutation.SetIntroducedPhone(s)
	return ru
}

// SetNillableIntroducedPhone sets the "introduced_phone" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableIntroducedPhone(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetIntroducedPhone(*s)
	}
	return ru
}

// SetPosition sets the "position" field.
func (ru *ResumeUpdate) SetPosition(s string) *ResumeUpdate {
	ru.mutation.SetPosition(s)
	return ru
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillablePosition(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetPosition(*s)
	}
	return ru
}

// SetFile sets the "file" field.
func (ru *ResumeUpdate) SetFile(s string) *ResumeUpdate {
	ru.mutation.SetFile(s)
	return ru
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableFile(s *string) *ResumeUpdate {
	if s != nil {
		ru.SetFile(*s)
	}
	return ru
}

// SetStatus sets the "status" field.
func (ru *ResumeUpdate) SetStatus(r resume.Status) *ResumeUpdate {
	ru.mutation.SetStatus(r)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableStatus(r *resume.Status) *ResumeUpdate {
	if r != nil {
		ru.SetStatus(*r)
	}
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ResumeUpdate) SetUpdatedAt(t time.Time) *ResumeUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *ResumeUpdate) SetUserID(i int) *ResumeUpdate {
	ru.mutation.SetUserID(i)
	return ru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ru *ResumeUpdate) SetNillableUserID(i *int) *ResumeUpdate {
	if i != nil {
		ru.SetUserID(*i)
	}
	return ru
}

// SetUser sets the "user" edge to the User entity.
func (ru *ResumeUpdate) SetUser(u *User) *ResumeUpdate {
	return ru.SetUserID(u.ID)
}

// Mutation returns the ResumeMutation object of the builder.
func (ru *ResumeUpdate) Mutation() *ResumeMutation {
	return ru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ru *ResumeUpdate) ClearUser() *ResumeUpdate {
	ru.mutation.ClearUser()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResumeUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResumeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResumeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResumeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ResumeUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := resume.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResumeUpdate) check() error {
	if v, ok := ru.mutation.IntroducedName(); ok {
		if err := resume.IntroducedNameValidator(v); err != nil {
			return &ValidationError{Name: "introduced_name", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.IntroducedPhone(); ok {
		if err := resume.IntroducedPhoneValidator(v); err != nil {
			return &ValidationError{Name: "introduced_phone", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_phone": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Position(); ok {
		if err := resume.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Resume.position": %w`, err)}
		}
	}
	if v, ok := ru.mutation.File(); ok {
		if err := resume.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Resume.file": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := resume.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Resume.status": %w`, err)}
		}
	}
	if ru.mutation.UserCleared() && len(ru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Resume.user"`)
	}
	return nil
}

func (ru *ResumeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.IntroducedName(); ok {
		_spec.SetField(resume.FieldIntroducedName, field.TypeString, value)
	}
	if value, ok := ru.mutation.IntroducedPhone(); ok {
		_spec.SetField(resume.FieldIntroducedPhone, field.TypeString, value)
	}
	if value, ok := ru.mutation.Position(); ok {
		_spec.SetField(resume.FieldPosition, field.TypeString, value)
	}
	if value, ok := ru.mutation.File(); ok {
		_spec.SetField(resume.FieldFile, field.TypeString, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ResumeUpdateOne is the builder for updating a single Resume entity.
type ResumeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResumeMutation
}

// SetIntroducedName sets the "introduced_name" field.
func (ruo *ResumeUpdateOne) SetIntroducedName(s string) *ResumeUpdateOne {
	ruo.mutation.SetIntroducedName(s)
	return ruo
}

// SetNillableIntroducedName sets the "introduced_name" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableIntroducedName(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetIntroducedName(*s)
	}
	return ruo
}

// SetIntroducedPhone sets the "introduced_phone" field.
func (ruo *ResumeUpdateOne) SetIntroducedPhone(s string) *ResumeUpdateOne {
	ruo.mutation.SetIntroducedPhone(s)
	return ruo
}

// SetNillableIntroducedPhone sets the "introduced_phone" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableIntroducedPhone(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetIntroducedPhone(*s)
	}
	return ruo
}

// SetPosition sets the "position" field.
func (ruo *ResumeUpdateOne) SetPosition(s string) *ResumeUpdateOne {
	ruo.mutation.SetPosition(s)
	return ruo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillablePosition(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetPosition(*s)
	}
	return ruo
}

// SetFile sets the "file" field.
func (ruo *ResumeUpdateOne) SetFile(s string) *ResumeUpdateOne {
	ruo.mutation.SetFile(s)
	return ruo
}

// SetNillableFile sets the "file" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableFile(s *string) *ResumeUpdateOne {
	if s != nil {
		ruo.SetFile(*s)
	}
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ResumeUpdateOne) SetStatus(r resume.Status) *ResumeUpdateOne {
	ruo.mutation.SetStatus(r)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableStatus(r *resume.Status) *ResumeUpdateOne {
	if r != nil {
		ruo.SetStatus(*r)
	}
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ResumeUpdateOne) SetUpdatedAt(t time.Time) *ResumeUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *ResumeUpdateOne) SetUserID(i int) *ResumeUpdateOne {
	ruo.mutation.SetUserID(i)
	return ruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruo *ResumeUpdateOne) SetNillableUserID(i *int) *ResumeUpdateOne {
	if i != nil {
		ruo.SetUserID(*i)
	}
	return ruo
}

// SetUser sets the "user" edge to the User entity.
func (ruo *ResumeUpdateOne) SetUser(u *User) *ResumeUpdateOne {
	return ruo.SetUserID(u.ID)
}

// Mutation returns the ResumeMutation object of the builder.
func (ruo *ResumeUpdateOne) Mutation() *ResumeMutation {
	return ruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ruo *ResumeUpdateOne) ClearUser() *ResumeUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// Where appends a list predicates to the ResumeUpdate builder.
func (ruo *ResumeUpdateOne) Where(ps ...predicate.Resume) *ResumeUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResumeUpdateOne) Select(field string, fields ...string) *ResumeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resume entity.
func (ruo *ResumeUpdateOne) Save(ctx context.Context) (*Resume, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResumeUpdateOne) SaveX(ctx context.Context) *Resume {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResumeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResumeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ResumeUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := resume.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResumeUpdateOne) check() error {
	if v, ok := ruo.mutation.IntroducedName(); ok {
		if err := resume.IntroducedNameValidator(v); err != nil {
			return &ValidationError{Name: "introduced_name", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.IntroducedPhone(); ok {
		if err := resume.IntroducedPhoneValidator(v); err != nil {
			return &ValidationError{Name: "introduced_phone", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_phone": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Position(); ok {
		if err := resume.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Resume.position": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.File(); ok {
		if err := resume.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Resume.file": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := resume.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Resume.status": %w`, err)}
		}
	}
	if ruo.mutation.UserCleared() && len(ruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Resume.user"`)
	}
	return nil
}

func (ruo *ResumeUpdateOne) sqlSave(ctx context.Context) (_node *Resume, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(resume.Table, resume.Columns, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resume.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resume.FieldID)
		for _, f := range fields {
			if !resume.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resume.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.IntroducedName(); ok {
		_spec.SetField(resume.FieldIntroducedName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IntroducedPhone(); ok {
		_spec.SetField(resume.FieldIntroducedPhone, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Position(); ok {
		_spec.SetField(resume.FieldPosition, field.TypeString, value)
	}
	if value, ok := ruo.mutation.File(); ok {
		_spec.SetField(resume.FieldFile, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resume{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resume.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
