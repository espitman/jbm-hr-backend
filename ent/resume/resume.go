// Code generated by ent, DO NOT EDIT.

package resume

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the resume type in the database.
	Label = "resume"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIntroducedName holds the string denoting the introduced_name field in the database.
	FieldIntroducedName = "introduced_name"
	// FieldIntroducedPhone holds the string denoting the introduced_phone field in the database.
	FieldIntroducedPhone = "introduced_phone"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldFile holds the string denoting the file field in the database.
	FieldFile = "file"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the resume in the database.
	Table = "resumes"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "resumes"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for resume fields.
var Columns = []string{
	FieldID,
	FieldIntroducedName,
	FieldIntroducedPhone,
	FieldPosition,
	FieldFile,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IntroducedNameValidator is a validator for the "introduced_name" field. It is called by the builders before save.
	IntroducedNameValidator func(string) error
	// IntroducedPhoneValidator is a validator for the "introduced_phone" field. It is called by the builders before save.
	IntroducedPhoneValidator func(string) error
	// PositionValidator is a validator for the "position" field. It is called by the builders before save.
	PositionValidator func(string) error
	// FileValidator is a validator for the "file" field. It is called by the builders before save.
	FileValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusReviewed Status = "reviewed"
	StatusAccepted Status = "accepted"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusReviewed, StatusAccepted, StatusRejected:
		return nil
	default:
		return fmt.Errorf("resume: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Resume queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIntroducedName orders the results by the introduced_name field.
func ByIntroducedName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroducedName, opts...).ToFunc()
}

// ByIntroducedPhone orders the results by the introduced_phone field.
func ByIntroducedPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroducedPhone, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByFile orders the results by the file field.
func ByFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFile, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
