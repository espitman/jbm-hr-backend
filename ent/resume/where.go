// Code generated by ent, DO NOT EDIT.

package resume

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldID, id))
}

// IntroducedName applies equality check predicate on the "introduced_name" field. It's identical to IntroducedNameEQ.
func IntroducedName(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldIntroducedName, v))
}

// IntroducedPhone applies equality check predicate on the "introduced_phone" field. It's identical to IntroducedPhoneEQ.
func IntroducedPhone(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldIntroducedPhone, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldPosition, v))
}

// File applies equality check predicate on the "file" field. It's identical to FileEQ.
func File(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldFile, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUserID, v))
}

// IntroducedNameEQ applies the EQ predicate on the "introduced_name" field.
func IntroducedNameEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldIntroducedName, v))
}

// IntroducedNameNEQ applies the NEQ predicate on the "introduced_name" field.
func IntroducedNameNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldIntroducedName, v))
}

// IntroducedNameIn applies the In predicate on the "introduced_name" field.
func IntroducedNameIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldIntroducedName, vs...))
}

// IntroducedNameNotIn applies the NotIn predicate on the "introduced_name" field.
func IntroducedNameNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldIntroducedName, vs...))
}

// IntroducedNameGT applies the GT predicate on the "introduced_name" field.
func IntroducedNameGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldIntroducedName, v))
}

// IntroducedNameGTE applies the GTE predicate on the "introduced_name" field.
func IntroducedNameGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldIntroducedName, v))
}

// IntroducedNameLT applies the LT predicate on the "introduced_name" field.
func IntroducedNameLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldIntroducedName, v))
}

// IntroducedNameLTE applies the LTE predicate on the "introduced_name" field.
func IntroducedNameLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldIntroducedName, v))
}

// IntroducedNameContains applies the Contains predicate on the "introduced_name" field.
func IntroducedNameContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldIntroducedName, v))
}

// IntroducedNameHasPrefix applies the HasPrefix predicate on the "introduced_name" field.
func IntroducedNameHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldIntroducedName, v))
}

// IntroducedNameHasSuffix applies the HasSuffix predicate on the "introduced_name" field.
func IntroducedNameHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldIntroducedName, v))
}

// IntroducedNameEqualFold applies the EqualFold predicate on the "introduced_name" field.
func IntroducedNameEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldIntroducedName, v))
}

// IntroducedNameContainsFold applies the ContainsFold predicate on the "introduced_name" field.
func IntroducedNameContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldIntroducedName, v))
}

// IntroducedPhoneEQ applies the EQ predicate on the "introduced_phone" field.
func IntroducedPhoneEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldIntroducedPhone, v))
}

// IntroducedPhoneNEQ applies the NEQ predicate on the "introduced_phone" field.
func IntroducedPhoneNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldIntroducedPhone, v))
}

// IntroducedPhoneIn applies the In predicate on the "introduced_phone" field.
func IntroducedPhoneIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldIntroducedPhone, vs...))
}

// IntroducedPhoneNotIn applies the NotIn predicate on the "introduced_phone" field.
func IntroducedPhoneNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldIntroducedPhone, vs...))
}

// IntroducedPhoneGT applies the GT predicate on the "introduced_phone" field.
func IntroducedPhoneGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldIntroducedPhone, v))
}

// IntroducedPhoneGTE applies the GTE predicate on the "introduced_phone" field.
func IntroducedPhoneGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldIntroducedPhone, v))
}

// IntroducedPhoneLT applies the LT predicate on the "introduced_phone" field.
func IntroducedPhoneLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldIntroducedPhone, v))
}

// IntroducedPhoneLTE applies the LTE predicate on the "introduced_phone" field.
func IntroducedPhoneLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldIntroducedPhone, v))
}

// IntroducedPhoneContains applies the Contains predicate on the "introduced_phone" field.
func IntroducedPhoneContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldIntroducedPhone, v))
}

// IntroducedPhoneHasPrefix applies the HasPrefix predicate on the "introduced_phone" field.
func IntroducedPhoneHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldIntroducedPhone, v))
}

// IntroducedPhoneHasSuffix applies the HasSuffix predicate on the "introduced_phone" field.
func IntroducedPhoneHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldIntroducedPhone, v))
}

// IntroducedPhoneEqualFold applies the EqualFold predicate on the "introduced_phone" field.
func IntroducedPhoneEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldIntroducedPhone, v))
}

// IntroducedPhoneContainsFold applies the ContainsFold predicate on the "introduced_phone" field.
func IntroducedPhoneContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldIntroducedPhone, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldPosition, v))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldPosition, v))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldPosition, v))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldPosition, v))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldPosition, v))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldPosition, v))
}

// FileEQ applies the EQ predicate on the "file" field.
func FileEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldFile, v))
}

// FileNEQ applies the NEQ predicate on the "file" field.
func FileNEQ(v string) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldFile, v))
}

// FileIn applies the In predicate on the "file" field.
func FileIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldFile, vs...))
}

// FileNotIn applies the NotIn predicate on the "file" field.
func FileNotIn(vs ...string) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldFile, vs...))
}

// FileGT applies the GT predicate on the "file" field.
func FileGT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldFile, v))
}

// FileGTE applies the GTE predicate on the "file" field.
func FileGTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldFile, v))
}

// FileLT applies the LT predicate on the "file" field.
func FileLT(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldFile, v))
}

// FileLTE applies the LTE predicate on the "file" field.
func FileLTE(v string) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldFile, v))
}

// FileContains applies the Contains predicate on the "file" field.
func FileContains(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContains(FieldFile, v))
}

// FileHasPrefix applies the HasPrefix predicate on the "file" field.
func FileHasPrefix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasPrefix(FieldFile, v))
}

// FileHasSuffix applies the HasSuffix predicate on the "file" field.
func FileHasSuffix(v string) predicate.Resume {
	return predicate.Resume(sql.FieldHasSuffix(FieldFile, v))
}

// FileEqualFold applies the EqualFold predicate on the "file" field.
func FileEqualFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldEqualFold(FieldFile, v))
}

// FileContainsFold applies the ContainsFold predicate on the "file" field.
func FileContainsFold(v string) predicate.Resume {
	return predicate.Resume(sql.FieldContainsFold(FieldFile, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Resume {
	return predicate.Resume(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Resume {
	return predicate.Resume(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Resume {
	return predicate.Resume(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Resume {
	return predicate.Resume(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Resume {
	return predicate.Resume(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Resume {
	return predicate.Resume(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Resume) predicate.Resume {
	return predicate.Resume(sql.NotPredicates(p))
}
