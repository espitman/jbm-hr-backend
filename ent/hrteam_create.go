// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/hrteam"
)

// HRTeamCreate is the builder for creating a HRTeam entity.
type HRTeamCreate struct {
	config
	mutation *HRTeamMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (htc *HRTeamCreate) SetFullName(s string) *HRTeamCreate {
	htc.mutation.SetFullName(s)
	return htc
}

// SetRole sets the "role" field.
func (htc *HRTeamCreate) SetRole(s string) *HRTeamCreate {
	htc.mutation.SetRole(s)
	return htc
}

// SetEmail sets the "email" field.
func (htc *HRTeamCreate) SetEmail(s string) *HRTeamCreate {
	htc.mutation.SetEmail(s)
	return htc
}

// SetPhone sets the "phone" field.
func (htc *HRTeamCreate) SetPhone(s string) *HRTeamCreate {
	htc.mutation.SetPhone(s)
	return htc
}

// Mutation returns the HRTeamMutation object of the builder.
func (htc *HRTeamCreate) Mutation() *HRTeamMutation {
	return htc.mutation
}

// Save creates the HRTeam in the database.
func (htc *HRTeamCreate) Save(ctx context.Context) (*HRTeam, error) {
	return withHooks(ctx, htc.sqlSave, htc.mutation, htc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (htc *HRTeamCreate) SaveX(ctx context.Context) *HRTeam {
	v, err := htc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htc *HRTeamCreate) Exec(ctx context.Context) error {
	_, err := htc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htc *HRTeamCreate) ExecX(ctx context.Context) {
	if err := htc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (htc *HRTeamCreate) check() error {
	if _, ok := htc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "HRTeam.full_name"`)}
	}
	if v, ok := htc.mutation.FullName(); ok {
		if err := hrteam.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`ent: validator failed for field "HRTeam.full_name": %w`, err)}
		}
	}
	if _, ok := htc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "HRTeam.role"`)}
	}
	if v, ok := htc.mutation.Role(); ok {
		if err := hrteam.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "HRTeam.role": %w`, err)}
		}
	}
	if _, ok := htc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "HRTeam.email"`)}
	}
	if v, ok := htc.mutation.Email(); ok {
		if err := hrteam.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "HRTeam.email": %w`, err)}
		}
	}
	if _, ok := htc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "HRTeam.phone"`)}
	}
	if v, ok := htc.mutation.Phone(); ok {
		if err := hrteam.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "HRTeam.phone": %w`, err)}
		}
	}
	return nil
}

func (htc *HRTeamCreate) sqlSave(ctx context.Context) (*HRTeam, error) {
	if err := htc.check(); err != nil {
		return nil, err
	}
	_node, _spec := htc.createSpec()
	if err := sqlgraph.CreateNode(ctx, htc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	htc.mutation.id = &_node.ID
	htc.mutation.done = true
	return _node, nil
}

func (htc *HRTeamCreate) createSpec() (*HRTeam, *sqlgraph.CreateSpec) {
	var (
		_node = &HRTeam{config: htc.config}
		_spec = sqlgraph.NewCreateSpec(hrteam.Table, sqlgraph.NewFieldSpec(hrteam.FieldID, field.TypeInt))
	)
	if value, ok := htc.mutation.FullName(); ok {
		_spec.SetField(hrteam.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := htc.mutation.Role(); ok {
		_spec.SetField(hrteam.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if value, ok := htc.mutation.Email(); ok {
		_spec.SetField(hrteam.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := htc.mutation.Phone(); ok {
		_spec.SetField(hrteam.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	return _node, _spec
}

// HRTeamCreateBulk is the builder for creating many HRTeam entities in bulk.
type HRTeamCreateBulk struct {
	config
	err      error
	builders []*HRTeamCreate
}

// Save creates the HRTeam entities in the database.
func (htcb *HRTeamCreateBulk) Save(ctx context.Context) ([]*HRTeam, error) {
	if htcb.err != nil {
		return nil, htcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(htcb.builders))
	nodes := make([]*HRTeam, len(htcb.builders))
	mutators := make([]Mutator, len(htcb.builders))
	for i := range htcb.builders {
		func(i int, root context.Context) {
			builder := htcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HRTeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, htcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, htcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, htcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (htcb *HRTeamCreateBulk) SaveX(ctx context.Context) []*HRTeam {
	v, err := htcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (htcb *HRTeamCreateBulk) Exec(ctx context.Context) error {
	_, err := htcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (htcb *HRTeamCreateBulk) ExecX(ctx context.Context) {
	if err := htcb.Exec(ctx); err != nil {
		panic(err)
	}
}
