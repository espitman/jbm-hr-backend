// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/espitman/jbm-hr-backend/ent/request"
	"github.com/espitman/jbm-hr-backend/ent/requestmeta"
)

// RequestMeta is the model entity for the RequestMeta schema.
type RequestMeta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID int `json:"request_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestMetaQuery when eager-loading is set.
	Edges        RequestMetaEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RequestMetaEdges holds the relations/edges for other nodes in the graph.
type RequestMetaEdges struct {
	// Request holds the value of the request edge.
	Request *Request `json:"request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestOrErr returns the Request value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestMetaEdges) RequestOrErr() (*Request, error) {
	if e.Request != nil {
		return e.Request, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: request.Label}
	}
	return nil, &NotLoadedError{edge: "request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequestMeta) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requestmeta.FieldID, requestmeta.FieldRequestID:
			values[i] = new(sql.NullInt64)
		case requestmeta.FieldKey, requestmeta.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequestMeta fields.
func (rm *RequestMeta) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requestmeta.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rm.ID = int(value.Int64)
		case requestmeta.FieldRequestID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				rm.RequestID = int(value.Int64)
			}
		case requestmeta.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				rm.Key = value.String
			}
		case requestmeta.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				rm.Value = value.String
			}
		default:
			rm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the RequestMeta.
// This includes values selected through modifiers, order, etc.
func (rm *RequestMeta) GetValue(name string) (ent.Value, error) {
	return rm.selectValues.Get(name)
}

// QueryRequest queries the "request" edge of the RequestMeta entity.
func (rm *RequestMeta) QueryRequest() *RequestQuery {
	return NewRequestMetaClient(rm.config).QueryRequest(rm)
}

// Update returns a builder for updating this RequestMeta.
// Note that you need to call RequestMeta.Unwrap() before calling this method if this RequestMeta
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RequestMeta) Update() *RequestMetaUpdateOne {
	return NewRequestMetaClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the RequestMeta entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RequestMeta) Unwrap() *RequestMeta {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RequestMeta is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RequestMeta) String() string {
	var builder strings.Builder
	builder.WriteString("RequestMeta(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("request_id=")
	builder.WriteString(fmt.Sprintf("%v", rm.RequestID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(rm.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(rm.Value)
	builder.WriteByte(')')
	return builder.String()
}

// RequestMetaSlice is a parsable slice of RequestMeta.
type RequestMetaSlice []*RequestMeta
