// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/espitman/jbm-hr-backend/ent/hrteam"
)

// HRTeam is the model entity for the HRTeam schema.
type HRTeam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Full name of the HR team member
	FullName string `json:"full_name,omitempty"`
	// Role of the HR team member
	Role string `json:"role,omitempty"`
	// Email address of the HR team member
	Email string `json:"email,omitempty"`
	// Phone number of the HR team member
	Phone        string `json:"phone,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HRTeam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hrteam.FieldID:
			values[i] = new(sql.NullInt64)
		case hrteam.FieldFullName, hrteam.FieldRole, hrteam.FieldEmail, hrteam.FieldPhone:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HRTeam fields.
func (ht *HRTeam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hrteam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ht.ID = int(value.Int64)
		case hrteam.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				ht.FullName = value.String
			}
		case hrteam.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				ht.Role = value.String
			}
		case hrteam.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ht.Email = value.String
			}
		case hrteam.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				ht.Phone = value.String
			}
		default:
			ht.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HRTeam.
// This includes values selected through modifiers, order, etc.
func (ht *HRTeam) Value(name string) (ent.Value, error) {
	return ht.selectValues.Get(name)
}

// Update returns a builder for updating this HRTeam.
// Note that you need to call HRTeam.Unwrap() before calling this method if this HRTeam
// was returned from a transaction, and the transaction was committed or rolled back.
func (ht *HRTeam) Update() *HRTeamUpdateOne {
	return NewHRTeamClient(ht.config).UpdateOne(ht)
}

// Unwrap unwraps the HRTeam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ht *HRTeam) Unwrap() *HRTeam {
	_tx, ok := ht.config.driver.(*txDriver)
	if !ok {
		panic("ent: HRTeam is not a transactional entity")
	}
	ht.config.driver = _tx.drv
	return ht
}

// String implements the fmt.Stringer.
func (ht *HRTeam) String() string {
	var builder strings.Builder
	builder.WriteString("HRTeam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ht.ID))
	builder.WriteString("full_name=")
	builder.WriteString(ht.FullName)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(ht.Role)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ht.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(ht.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// HRTeams is a parsable slice of HRTeam.
type HRTeams []*HRTeam
