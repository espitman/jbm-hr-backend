// Code generated by ent, DO NOT EDIT.

package alibabacode

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the alibabacode type in the database.
	Label = "alibaba_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldAssignToUserID holds the string denoting the assign_to_user_id field in the database.
	FieldAssignToUserID = "assign_to_user_id"
	// FieldAssignAt holds the string denoting the assign_at field in the database.
	FieldAssignAt = "assign_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeAssignedToUser holds the string denoting the assigned_to_user edge name in mutations.
	EdgeAssignedToUser = "assigned_to_user"
	// Table holds the table name of the alibabacode in the database.
	Table = "alibaba_codes"
	// AssignedToUserTable is the table that holds the assigned_to_user relation/edge.
	AssignedToUserTable = "alibaba_codes"
	// AssignedToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssignedToUserInverseTable = "users"
	// AssignedToUserColumn is the table column denoting the assigned_to_user relation/edge.
	AssignedToUserColumn = "assign_to_user_id"
)

// Columns holds all SQL columns for alibabacode fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldUsed,
	FieldCreatedAt,
	FieldAssignToUserID,
	FieldAssignAt,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "alibaba_codes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_alibaba_codes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	Type1m  Type = "1m"
	Type3m  Type = "3m"
	Type6m  Type = "6m"
	Type12m Type = "12m"
	Type25m Type = "25m"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case Type1m, Type3m, Type6m, Type12m, Type25m:
		return nil
	default:
		return fmt.Errorf("alibabacode: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the AlibabaCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAssignToUserID orders the results by the assign_to_user_id field.
func ByAssignToUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignToUserID, opts...).ToFunc()
}

// ByAssignAt orders the results by the assign_at field.
func ByAssignAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssignAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByAssignedToUserField orders the results by assigned_to_user field.
func ByAssignedToUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedToUserStep(), sql.OrderByField(field, opts...))
	}
}
func newAssignedToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssignedToUserTable, AssignedToUserColumn),
	)
}
