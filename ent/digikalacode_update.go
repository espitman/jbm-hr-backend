// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/digikalacode"
	"github.com/espitman/jbm-hr-backend/ent/predicate"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// DigikalaCodeUpdate is the builder for updating DigikalaCode entities.
type DigikalaCodeUpdate struct {
	config
	hooks    []Hook
	mutation *DigikalaCodeMutation
}

// Where appends a list predicates to the DigikalaCodeUpdate builder.
func (dcu *DigikalaCodeUpdate) Where(ps ...predicate.DigikalaCode) *DigikalaCodeUpdate {
	dcu.mutation.Where(ps...)
	return dcu
}

// SetCode sets the "code" field.
func (dcu *DigikalaCodeUpdate) SetCode(s string) *DigikalaCodeUpdate {
	dcu.mutation.SetCode(s)
	return dcu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableCode(s *string) *DigikalaCodeUpdate {
	if s != nil {
		dcu.SetCode(*s)
	}
	return dcu
}

// SetUsed sets the "used" field.
func (dcu *DigikalaCodeUpdate) SetUsed(b bool) *DigikalaCodeUpdate {
	dcu.mutation.SetUsed(b)
	return dcu
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableUsed(b *bool) *DigikalaCodeUpdate {
	if b != nil {
		dcu.SetUsed(*b)
	}
	return dcu
}

// SetCreatedAt sets the "created_at" field.
func (dcu *DigikalaCodeUpdate) SetCreatedAt(t time.Time) *DigikalaCodeUpdate {
	dcu.mutation.SetCreatedAt(t)
	return dcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableCreatedAt(t *time.Time) *DigikalaCodeUpdate {
	if t != nil {
		dcu.SetCreatedAt(*t)
	}
	return dcu
}

// SetAssignToUserID sets the "assign_to_user_id" field.
func (dcu *DigikalaCodeUpdate) SetAssignToUserID(i int) *DigikalaCodeUpdate {
	dcu.mutation.SetAssignToUserID(i)
	return dcu
}

// SetNillableAssignToUserID sets the "assign_to_user_id" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableAssignToUserID(i *int) *DigikalaCodeUpdate {
	if i != nil {
		dcu.SetAssignToUserID(*i)
	}
	return dcu
}

// ClearAssignToUserID clears the value of the "assign_to_user_id" field.
func (dcu *DigikalaCodeUpdate) ClearAssignToUserID() *DigikalaCodeUpdate {
	dcu.mutation.ClearAssignToUserID()
	return dcu
}

// SetAssignAt sets the "assign_at" field.
func (dcu *DigikalaCodeUpdate) SetAssignAt(t time.Time) *DigikalaCodeUpdate {
	dcu.mutation.SetAssignAt(t)
	return dcu
}

// SetNillableAssignAt sets the "assign_at" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableAssignAt(t *time.Time) *DigikalaCodeUpdate {
	if t != nil {
		dcu.SetAssignAt(*t)
	}
	return dcu
}

// ClearAssignAt clears the value of the "assign_at" field.
func (dcu *DigikalaCodeUpdate) ClearAssignAt() *DigikalaCodeUpdate {
	dcu.mutation.ClearAssignAt()
	return dcu
}

// SetUsedAt sets the "used_at" field.
func (dcu *DigikalaCodeUpdate) SetUsedAt(t time.Time) *DigikalaCodeUpdate {
	dcu.mutation.SetUsedAt(t)
	return dcu
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableUsedAt(t *time.Time) *DigikalaCodeUpdate {
	if t != nil {
		dcu.SetUsedAt(*t)
	}
	return dcu
}

// ClearUsedAt clears the value of the "used_at" field.
func (dcu *DigikalaCodeUpdate) ClearUsedAt() *DigikalaCodeUpdate {
	dcu.mutation.ClearUsedAt()
	return dcu
}

// SetAssignedToID sets the "assigned_to" edge to the User entity by ID.
func (dcu *DigikalaCodeUpdate) SetAssignedToID(id int) *DigikalaCodeUpdate {
	dcu.mutation.SetAssignedToID(id)
	return dcu
}

// SetNillableAssignedToID sets the "assigned_to" edge to the User entity by ID if the given value is not nil.
func (dcu *DigikalaCodeUpdate) SetNillableAssignedToID(id *int) *DigikalaCodeUpdate {
	if id != nil {
		dcu = dcu.SetAssignedToID(*id)
	}
	return dcu
}

// SetAssignedTo sets the "assigned_to" edge to the User entity.
func (dcu *DigikalaCodeUpdate) SetAssignedTo(u *User) *DigikalaCodeUpdate {
	return dcu.SetAssignedToID(u.ID)
}

// Mutation returns the DigikalaCodeMutation object of the builder.
func (dcu *DigikalaCodeUpdate) Mutation() *DigikalaCodeMutation {
	return dcu.mutation
}

// ClearAssignedTo clears the "assigned_to" edge to the User entity.
func (dcu *DigikalaCodeUpdate) ClearAssignedTo() *DigikalaCodeUpdate {
	dcu.mutation.ClearAssignedTo()
	return dcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dcu *DigikalaCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dcu.sqlSave, dcu.mutation, dcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcu *DigikalaCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := dcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dcu *DigikalaCodeUpdate) Exec(ctx context.Context) error {
	_, err := dcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcu *DigikalaCodeUpdate) ExecX(ctx context.Context) {
	if err := dcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcu *DigikalaCodeUpdate) check() error {
	if v, ok := dcu.mutation.Code(); ok {
		if err := digikalacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DigikalaCode.code": %w`, err)}
		}
	}
	return nil
}

func (dcu *DigikalaCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(digikalacode.Table, digikalacode.Columns, sqlgraph.NewFieldSpec(digikalacode.FieldID, field.TypeInt))
	if ps := dcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcu.mutation.Code(); ok {
		_spec.SetField(digikalacode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcu.mutation.Used(); ok {
		_spec.SetField(digikalacode.FieldUsed, field.TypeBool, value)
	}
	if value, ok := dcu.mutation.CreatedAt(); ok {
		_spec.SetField(digikalacode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dcu.mutation.AssignAt(); ok {
		_spec.SetField(digikalacode.FieldAssignAt, field.TypeTime, value)
	}
	if dcu.mutation.AssignAtCleared() {
		_spec.ClearField(digikalacode.FieldAssignAt, field.TypeTime)
	}
	if value, ok := dcu.mutation.UsedAt(); ok {
		_spec.SetField(digikalacode.FieldUsedAt, field.TypeTime, value)
	}
	if dcu.mutation.UsedAtCleared() {
		_spec.ClearField(digikalacode.FieldUsedAt, field.TypeTime)
	}
	if dcu.mutation.AssignedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digikalacode.AssignedToTable,
			Columns: []string{digikalacode.AssignedToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcu.mutation.AssignedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digikalacode.AssignedToTable,
			Columns: []string{digikalacode.AssignedToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{digikalacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dcu.mutation.done = true
	return n, nil
}

// DigikalaCodeUpdateOne is the builder for updating a single DigikalaCode entity.
type DigikalaCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DigikalaCodeMutation
}

// SetCode sets the "code" field.
func (dcuo *DigikalaCodeUpdateOne) SetCode(s string) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetCode(s)
	return dcuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableCode(s *string) *DigikalaCodeUpdateOne {
	if s != nil {
		dcuo.SetCode(*s)
	}
	return dcuo
}

// SetUsed sets the "used" field.
func (dcuo *DigikalaCodeUpdateOne) SetUsed(b bool) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetUsed(b)
	return dcuo
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableUsed(b *bool) *DigikalaCodeUpdateOne {
	if b != nil {
		dcuo.SetUsed(*b)
	}
	return dcuo
}

// SetCreatedAt sets the "created_at" field.
func (dcuo *DigikalaCodeUpdateOne) SetCreatedAt(t time.Time) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetCreatedAt(t)
	return dcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableCreatedAt(t *time.Time) *DigikalaCodeUpdateOne {
	if t != nil {
		dcuo.SetCreatedAt(*t)
	}
	return dcuo
}

// SetAssignToUserID sets the "assign_to_user_id" field.
func (dcuo *DigikalaCodeUpdateOne) SetAssignToUserID(i int) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetAssignToUserID(i)
	return dcuo
}

// SetNillableAssignToUserID sets the "assign_to_user_id" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableAssignToUserID(i *int) *DigikalaCodeUpdateOne {
	if i != nil {
		dcuo.SetAssignToUserID(*i)
	}
	return dcuo
}

// ClearAssignToUserID clears the value of the "assign_to_user_id" field.
func (dcuo *DigikalaCodeUpdateOne) ClearAssignToUserID() *DigikalaCodeUpdateOne {
	dcuo.mutation.ClearAssignToUserID()
	return dcuo
}

// SetAssignAt sets the "assign_at" field.
func (dcuo *DigikalaCodeUpdateOne) SetAssignAt(t time.Time) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetAssignAt(t)
	return dcuo
}

// SetNillableAssignAt sets the "assign_at" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableAssignAt(t *time.Time) *DigikalaCodeUpdateOne {
	if t != nil {
		dcuo.SetAssignAt(*t)
	}
	return dcuo
}

// ClearAssignAt clears the value of the "assign_at" field.
func (dcuo *DigikalaCodeUpdateOne) ClearAssignAt() *DigikalaCodeUpdateOne {
	dcuo.mutation.ClearAssignAt()
	return dcuo
}

// SetUsedAt sets the "used_at" field.
func (dcuo *DigikalaCodeUpdateOne) SetUsedAt(t time.Time) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetUsedAt(t)
	return dcuo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableUsedAt(t *time.Time) *DigikalaCodeUpdateOne {
	if t != nil {
		dcuo.SetUsedAt(*t)
	}
	return dcuo
}

// ClearUsedAt clears the value of the "used_at" field.
func (dcuo *DigikalaCodeUpdateOne) ClearUsedAt() *DigikalaCodeUpdateOne {
	dcuo.mutation.ClearUsedAt()
	return dcuo
}

// SetAssignedToID sets the "assigned_to" edge to the User entity by ID.
func (dcuo *DigikalaCodeUpdateOne) SetAssignedToID(id int) *DigikalaCodeUpdateOne {
	dcuo.mutation.SetAssignedToID(id)
	return dcuo
}

// SetNillableAssignedToID sets the "assigned_to" edge to the User entity by ID if the given value is not nil.
func (dcuo *DigikalaCodeUpdateOne) SetNillableAssignedToID(id *int) *DigikalaCodeUpdateOne {
	if id != nil {
		dcuo = dcuo.SetAssignedToID(*id)
	}
	return dcuo
}

// SetAssignedTo sets the "assigned_to" edge to the User entity.
func (dcuo *DigikalaCodeUpdateOne) SetAssignedTo(u *User) *DigikalaCodeUpdateOne {
	return dcuo.SetAssignedToID(u.ID)
}

// Mutation returns the DigikalaCodeMutation object of the builder.
func (dcuo *DigikalaCodeUpdateOne) Mutation() *DigikalaCodeMutation {
	return dcuo.mutation
}

// ClearAssignedTo clears the "assigned_to" edge to the User entity.
func (dcuo *DigikalaCodeUpdateOne) ClearAssignedTo() *DigikalaCodeUpdateOne {
	dcuo.mutation.ClearAssignedTo()
	return dcuo
}

// Where appends a list predicates to the DigikalaCodeUpdate builder.
func (dcuo *DigikalaCodeUpdateOne) Where(ps ...predicate.DigikalaCode) *DigikalaCodeUpdateOne {
	dcuo.mutation.Where(ps...)
	return dcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dcuo *DigikalaCodeUpdateOne) Select(field string, fields ...string) *DigikalaCodeUpdateOne {
	dcuo.fields = append([]string{field}, fields...)
	return dcuo
}

// Save executes the query and returns the updated DigikalaCode entity.
func (dcuo *DigikalaCodeUpdateOne) Save(ctx context.Context) (*DigikalaCode, error) {
	return withHooks(ctx, dcuo.sqlSave, dcuo.mutation, dcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dcuo *DigikalaCodeUpdateOne) SaveX(ctx context.Context) *DigikalaCode {
	node, err := dcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dcuo *DigikalaCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := dcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcuo *DigikalaCodeUpdateOne) ExecX(ctx context.Context) {
	if err := dcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcuo *DigikalaCodeUpdateOne) check() error {
	if v, ok := dcuo.mutation.Code(); ok {
		if err := digikalacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DigikalaCode.code": %w`, err)}
		}
	}
	return nil
}

func (dcuo *DigikalaCodeUpdateOne) sqlSave(ctx context.Context) (_node *DigikalaCode, err error) {
	if err := dcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(digikalacode.Table, digikalacode.Columns, sqlgraph.NewFieldSpec(digikalacode.FieldID, field.TypeInt))
	id, ok := dcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DigikalaCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, digikalacode.FieldID)
		for _, f := range fields {
			if !digikalacode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != digikalacode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dcuo.mutation.Code(); ok {
		_spec.SetField(digikalacode.FieldCode, field.TypeString, value)
	}
	if value, ok := dcuo.mutation.Used(); ok {
		_spec.SetField(digikalacode.FieldUsed, field.TypeBool, value)
	}
	if value, ok := dcuo.mutation.CreatedAt(); ok {
		_spec.SetField(digikalacode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dcuo.mutation.AssignAt(); ok {
		_spec.SetField(digikalacode.FieldAssignAt, field.TypeTime, value)
	}
	if dcuo.mutation.AssignAtCleared() {
		_spec.ClearField(digikalacode.FieldAssignAt, field.TypeTime)
	}
	if value, ok := dcuo.mutation.UsedAt(); ok {
		_spec.SetField(digikalacode.FieldUsedAt, field.TypeTime, value)
	}
	if dcuo.mutation.UsedAtCleared() {
		_spec.ClearField(digikalacode.FieldUsedAt, field.TypeTime)
	}
	if dcuo.mutation.AssignedToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digikalacode.AssignedToTable,
			Columns: []string{digikalacode.AssignedToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dcuo.mutation.AssignedToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digikalacode.AssignedToTable,
			Columns: []string{digikalacode.AssignedToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DigikalaCode{config: dcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{digikalacode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dcuo.mutation.done = true
	return _node, nil
}
