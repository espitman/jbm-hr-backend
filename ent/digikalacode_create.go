// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/digikalacode"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// DigikalaCodeCreate is the builder for creating a DigikalaCode entity.
type DigikalaCodeCreate struct {
	config
	mutation *DigikalaCodeMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (dcc *DigikalaCodeCreate) SetCode(s string) *DigikalaCodeCreate {
	dcc.mutation.SetCode(s)
	return dcc
}

// SetUsed sets the "used" field.
func (dcc *DigikalaCodeCreate) SetUsed(b bool) *DigikalaCodeCreate {
	dcc.mutation.SetUsed(b)
	return dcc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (dcc *DigikalaCodeCreate) SetNillableUsed(b *bool) *DigikalaCodeCreate {
	if b != nil {
		dcc.SetUsed(*b)
	}
	return dcc
}

// SetCreatedAt sets the "created_at" field.
func (dcc *DigikalaCodeCreate) SetCreatedAt(t time.Time) *DigikalaCodeCreate {
	dcc.mutation.SetCreatedAt(t)
	return dcc
}

// SetUsedByUserID sets the "used_by_user_id" field.
func (dcc *DigikalaCodeCreate) SetUsedByUserID(i int) *DigikalaCodeCreate {
	dcc.mutation.SetUsedByUserID(i)
	return dcc
}

// SetNillableUsedByUserID sets the "used_by_user_id" field if the given value is not nil.
func (dcc *DigikalaCodeCreate) SetNillableUsedByUserID(i *int) *DigikalaCodeCreate {
	if i != nil {
		dcc.SetUsedByUserID(*i)
	}
	return dcc
}

// SetUsedAt sets the "used_at" field.
func (dcc *DigikalaCodeCreate) SetUsedAt(t time.Time) *DigikalaCodeCreate {
	dcc.mutation.SetUsedAt(t)
	return dcc
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (dcc *DigikalaCodeCreate) SetNillableUsedAt(t *time.Time) *DigikalaCodeCreate {
	if t != nil {
		dcc.SetUsedAt(*t)
	}
	return dcc
}

// SetUsedByID sets the "used_by" edge to the User entity by ID.
func (dcc *DigikalaCodeCreate) SetUsedByID(id int) *DigikalaCodeCreate {
	dcc.mutation.SetUsedByID(id)
	return dcc
}

// SetNillableUsedByID sets the "used_by" edge to the User entity by ID if the given value is not nil.
func (dcc *DigikalaCodeCreate) SetNillableUsedByID(id *int) *DigikalaCodeCreate {
	if id != nil {
		dcc = dcc.SetUsedByID(*id)
	}
	return dcc
}

// SetUsedBy sets the "used_by" edge to the User entity.
func (dcc *DigikalaCodeCreate) SetUsedBy(u *User) *DigikalaCodeCreate {
	return dcc.SetUsedByID(u.ID)
}

// Mutation returns the DigikalaCodeMutation object of the builder.
func (dcc *DigikalaCodeCreate) Mutation() *DigikalaCodeMutation {
	return dcc.mutation
}

// Save creates the DigikalaCode in the database.
func (dcc *DigikalaCodeCreate) Save(ctx context.Context) (*DigikalaCode, error) {
	dcc.defaults()
	return withHooks(ctx, dcc.sqlSave, dcc.mutation, dcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DigikalaCodeCreate) SaveX(ctx context.Context) *DigikalaCode {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DigikalaCodeCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DigikalaCodeCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dcc *DigikalaCodeCreate) defaults() {
	if _, ok := dcc.mutation.Used(); !ok {
		v := digikalacode.DefaultUsed
		dcc.mutation.SetUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DigikalaCodeCreate) check() error {
	if _, ok := dcc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "DigikalaCode.code"`)}
	}
	if v, ok := dcc.mutation.Code(); ok {
		if err := digikalacode.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "DigikalaCode.code": %w`, err)}
		}
	}
	if _, ok := dcc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "DigikalaCode.used"`)}
	}
	if _, ok := dcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DigikalaCode.created_at"`)}
	}
	return nil
}

func (dcc *DigikalaCodeCreate) sqlSave(ctx context.Context) (*DigikalaCode, error) {
	if err := dcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dcc.mutation.id = &_node.ID
	dcc.mutation.done = true
	return _node, nil
}

func (dcc *DigikalaCodeCreate) createSpec() (*DigikalaCode, *sqlgraph.CreateSpec) {
	var (
		_node = &DigikalaCode{config: dcc.config}
		_spec = sqlgraph.NewCreateSpec(digikalacode.Table, sqlgraph.NewFieldSpec(digikalacode.FieldID, field.TypeInt))
	)
	if value, ok := dcc.mutation.Code(); ok {
		_spec.SetField(digikalacode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := dcc.mutation.Used(); ok {
		_spec.SetField(digikalacode.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if value, ok := dcc.mutation.CreatedAt(); ok {
		_spec.SetField(digikalacode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dcc.mutation.UsedAt(); ok {
		_spec.SetField(digikalacode.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = value
	}
	if nodes := dcc.mutation.UsedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   digikalacode.UsedByTable,
			Columns: []string{digikalacode.UsedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UsedByUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DigikalaCodeCreateBulk is the builder for creating many DigikalaCode entities in bulk.
type DigikalaCodeCreateBulk struct {
	config
	err      error
	builders []*DigikalaCodeCreate
}

// Save creates the DigikalaCode entities in the database.
func (dccb *DigikalaCodeCreateBulk) Save(ctx context.Context) ([]*DigikalaCode, error) {
	if dccb.err != nil {
		return nil, dccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DigikalaCode, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DigikalaCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DigikalaCodeCreateBulk) SaveX(ctx context.Context) []*DigikalaCode {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DigikalaCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DigikalaCodeCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
