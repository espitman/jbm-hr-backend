// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/jbm-hr-backend/ent/resume"
	"github.com/espitman/jbm-hr-backend/ent/user"
)

// ResumeCreate is the builder for creating a Resume entity.
type ResumeCreate struct {
	config
	mutation *ResumeMutation
	hooks    []Hook
}

// SetIntroducedName sets the "introduced_name" field.
func (rc *ResumeCreate) SetIntroducedName(s string) *ResumeCreate {
	rc.mutation.SetIntroducedName(s)
	return rc
}

// SetIntroducedPhone sets the "introduced_phone" field.
func (rc *ResumeCreate) SetIntroducedPhone(s string) *ResumeCreate {
	rc.mutation.SetIntroducedPhone(s)
	return rc
}

// SetPosition sets the "position" field.
func (rc *ResumeCreate) SetPosition(s string) *ResumeCreate {
	rc.mutation.SetPosition(s)
	return rc
}

// SetFile sets the "file" field.
func (rc *ResumeCreate) SetFile(s string) *ResumeCreate {
	rc.mutation.SetFile(s)
	return rc
}

// SetStatus sets the "status" field.
func (rc *ResumeCreate) SetStatus(r resume.Status) *ResumeCreate {
	rc.mutation.SetStatus(r)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableStatus(r *resume.Status) *ResumeCreate {
	if r != nil {
		rc.SetStatus(*r)
	}
	return rc
}

// SetCreatedAt sets the "created_at" field.
func (rc *ResumeCreate) SetCreatedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableCreatedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ResumeCreate) SetUpdatedAt(t time.Time) *ResumeCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ResumeCreate) SetNillableUpdatedAt(t *time.Time) *ResumeCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetUserID sets the "user_id" field.
func (rc *ResumeCreate) SetUserID(i int) *ResumeCreate {
	rc.mutation.SetUserID(i)
	return rc
}

// SetUser sets the "user" edge to the User entity.
func (rc *ResumeCreate) SetUser(u *User) *ResumeCreate {
	return rc.SetUserID(u.ID)
}

// Mutation returns the ResumeMutation object of the builder.
func (rc *ResumeCreate) Mutation() *ResumeMutation {
	return rc.mutation
}

// Save creates the Resume in the database.
func (rc *ResumeCreate) Save(ctx context.Context) (*Resume, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResumeCreate) SaveX(ctx context.Context) *Resume {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ResumeCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ResumeCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ResumeCreate) defaults() {
	if _, ok := rc.mutation.Status(); !ok {
		v := resume.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := resume.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := resume.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ResumeCreate) check() error {
	if _, ok := rc.mutation.IntroducedName(); !ok {
		return &ValidationError{Name: "introduced_name", err: errors.New(`ent: missing required field "Resume.introduced_name"`)}
	}
	if v, ok := rc.mutation.IntroducedName(); ok {
		if err := resume.IntroducedNameValidator(v); err != nil {
			return &ValidationError{Name: "introduced_name", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IntroducedPhone(); !ok {
		return &ValidationError{Name: "introduced_phone", err: errors.New(`ent: missing required field "Resume.introduced_phone"`)}
	}
	if v, ok := rc.mutation.IntroducedPhone(); ok {
		if err := resume.IntroducedPhoneValidator(v); err != nil {
			return &ValidationError{Name: "introduced_phone", err: fmt.Errorf(`ent: validator failed for field "Resume.introduced_phone": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Resume.position"`)}
	}
	if v, ok := rc.mutation.Position(); ok {
		if err := resume.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Resume.position": %w`, err)}
		}
	}
	if _, ok := rc.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "Resume.file"`)}
	}
	if v, ok := rc.mutation.File(); ok {
		if err := resume.FileValidator(v); err != nil {
			return &ValidationError{Name: "file", err: fmt.Errorf(`ent: validator failed for field "Resume.file": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Resume.status"`)}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := resume.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Resume.status": %w`, err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Resume.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Resume.updated_at"`)}
	}
	if _, ok := rc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Resume.user_id"`)}
	}
	if len(rc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Resume.user"`)}
	}
	return nil
}

func (rc *ResumeCreate) sqlSave(ctx context.Context) (*Resume, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ResumeCreate) createSpec() (*Resume, *sqlgraph.CreateSpec) {
	var (
		_node = &Resume{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(resume.Table, sqlgraph.NewFieldSpec(resume.FieldID, field.TypeInt))
	)
	if value, ok := rc.mutation.IntroducedName(); ok {
		_spec.SetField(resume.FieldIntroducedName, field.TypeString, value)
		_node.IntroducedName = value
	}
	if value, ok := rc.mutation.IntroducedPhone(); ok {
		_spec.SetField(resume.FieldIntroducedPhone, field.TypeString, value)
		_node.IntroducedPhone = value
	}
	if value, ok := rc.mutation.Position(); ok {
		_spec.SetField(resume.FieldPosition, field.TypeString, value)
		_node.Position = value
	}
	if value, ok := rc.mutation.File(); ok {
		_spec.SetField(resume.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(resume.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(resume.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(resume.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   resume.UserTable,
			Columns: []string{resume.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ResumeCreateBulk is the builder for creating many Resume entities in bulk.
type ResumeCreateBulk struct {
	config
	err      error
	builders []*ResumeCreate
}

// Save creates the Resume entities in the database.
func (rcb *ResumeCreateBulk) Save(ctx context.Context) ([]*Resume, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Resume, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResumeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ResumeCreateBulk) SaveX(ctx context.Context) []*Resume {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ResumeCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ResumeCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
