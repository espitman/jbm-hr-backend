basePath: /
definitions:
  albumhandler.AlbumResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Album'
      message:
        type: string
      success:
        type: boolean
    type: object
  albumhandler.AlbumsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/contract.Album'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  albumhandler.CreateAlbumRequest:
    properties:
      caption:
        example: Album caption
        type: string
      url:
        example: https://example.com/image.jpg
        type: string
    required:
    - caption
    - url
    type: object
  albumhandler.UpdateAlbumRequest:
    properties:
      caption:
        example: Updated album caption
        type: string
      url:
        example: https://example.com/updated-image.jpg
        type: string
    required:
    - caption
    - url
    type: object
  contract.Album:
    properties:
      caption:
        type: string
      id:
        type: integer
      url:
        type: string
    type: object
  dto.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.RegisterUserData:
    properties:
      avatar:
        type: string
      email:
        type: string
      id:
        type: integer
      phone:
        type: string
      role:
        type: string
    type: object
  userhandler.RegisterUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - employee
        type: string
    required:
    - email
    - phone
    - role
    type: object
  userhandler.RegisterUserResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.RegisterUserData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.RequestOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  userhandler.RequestOTPResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.VerifyOTPData:
    properties:
      token:
        type: string
    type: object
  userhandler.VerifyOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  userhandler.VerifyOTPResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.VerifyOTPData'
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact:
    email: s.heidari@jabama.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is the backend API for JBM HR system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: JBM HR Backend API
  version: "1.01"
paths:
  /api/v1/admin/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: Register User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/userhandler.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Register a new user
      tags:
      - admin - users
  /api/v1/albums:
    get:
      description: Retrieves a list of all albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get all albums
      tags:
      - albums
    post:
      consumes:
      - application/json
      description: Create a new album with the provided details
      parameters:
      - description: Album creation details
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/albumhandler.CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create a new album
      tags:
      - albums
  /api/v1/albums/{id}:
    delete:
      description: Deletes an album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
      summary: Delete album
      tags:
      - albums
    get:
      description: Retrieves an album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
      summary: Get album by ID
      tags:
      - albums
    put:
      consumes:
      - application/json
      description: Update an album's details by ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Album update details
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/albumhandler.UpdateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update an existing album
      tags:
      - albums
  /api/v1/users/request-otp:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email
      parameters:
      - description: Request OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.RequestOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.RequestOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Request OTP
      tags:
      - users
  /api/v1/users/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP and return JWT token if valid
      parameters:
      - description: Verify OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.VerifyOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Verify OTP
      tags:
      - users
swagger: "2.0"
