basePath: /
definitions:
  albumhandler.AlbumResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/contract.Album'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  albumhandler.CreateAlbumRequest:
    properties:
      caption:
        example: Album caption
        type: string
      url:
        example: https://example.com/image.jpg
        type: string
    required:
    - caption
    - url
    type: object
  albumhandler.UpdateAlbumRequest:
    properties:
      caption:
        example: Updated album caption
        type: string
      url:
        example: https://example.com/updated-image.jpg
        type: string
    required:
    - caption
    - url
    type: object
  contract.Album:
    properties:
      caption:
        type: string
      id:
        type: integer
      url:
        type: string
    type: object
  contract.Department:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: integer
      image:
        type: string
      short_name:
        type: string
      title:
        type: string
    type: object
  contract.HRTeam:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: integer
      phone:
        type: string
      role:
        type: string
    type: object
  contract.Request:
    properties:
      created_at:
        type: string
      description:
        type: string
      full_name:
        type: string
      id:
        type: integer
      kind:
        description: employment, payroll_stamped, salary_deduction, introduction_letter,
          good_conduct_letter, confirmation_letter, embassy_letter
        type: string
      status:
        description: pending, doing, done, rejected
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  contract.Resume:
    properties:
      created_at:
        type: string
      file:
        type: string
      id:
        type: integer
      introduced_name:
        type: string
      introduced_phone:
        type: string
      position:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  contract.UpdatePasswordInput:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  contract.UpdateUserInput:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - employee
        type: string
    required:
    - email
    - first_name
    - last_name
    - phone
    - role
    type: object
  departmenthandler.CreateDepartmentRequest:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      image:
        type: string
      short_name:
        type: string
      title:
        type: string
    required:
    - color
    - description
    - icon
    - image
    - short_name
    - title
    type: object
  departmenthandler.CreateDepartmentResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Department'
      message:
        type: string
      success:
        type: boolean
    type: object
  departmenthandler.DepartmentListData:
    properties:
      departments:
        items:
          $ref: '#/definitions/contract.Department'
        type: array
      total:
        type: integer
    type: object
  departmenthandler.GetDepartmentResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Department'
      message:
        type: string
      success:
        type: boolean
    type: object
  departmenthandler.ListDepartmentsResponse:
    properties:
      data:
        $ref: '#/definitions/departmenthandler.DepartmentListData'
      message:
        type: string
      success:
        type: boolean
    type: object
  departmenthandler.UpdateDepartmentRequest:
    properties:
      color:
        type: string
      description:
        type: string
      icon:
        type: string
      image:
        type: string
      short_name:
        type: string
      title:
        type: string
    required:
    - color
    - description
    - icon
    - image
    - short_name
    - title
    type: object
  departmenthandler.UpdateDepartmentResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Department'
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  hrteamhandler.CreateHRTeamResponse:
    properties:
      data:
        $ref: '#/definitions/contract.HRTeam'
      message:
        type: string
      success:
        type: boolean
    type: object
  hrteamhandler.GetHRTeamResponse:
    properties:
      data:
        $ref: '#/definitions/contract.HRTeam'
      message:
        type: string
      success:
        type: boolean
    type: object
  hrteamhandler.HRTeamInput:
    properties:
      email:
        type: string
      fullName:
        type: string
      phone:
        type: string
      role:
        type: string
    required:
    - email
    - fullName
    - phone
    - role
    type: object
  hrteamhandler.HRTeamListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/contract.HRTeam'
        type: array
      message:
        type: string
      success:
        type: boolean
    type: object
  hrteamhandler.UpdateHRTeamResponse:
    properties:
      data:
        $ref: '#/definitions/contract.HRTeam'
      message:
        type: string
      success:
        type: boolean
    type: object
  requesthandler.CreateRequestRequest:
    properties:
      description:
        type: string
      full_name:
        type: string
      kind:
        enum:
        - employment
        - payroll_stamped
        - salary_deduction
        - introduction_letter
        - good_conduct_letter
        - confirmation_letter
        - embassy_letter
        type: string
    required:
    - full_name
    - kind
    type: object
  requesthandler.CreateRequestResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Request'
      message:
        type: string
      success:
        type: boolean
    type: object
  requesthandler.GetRequestResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Request'
      message:
        type: string
      success:
        type: boolean
    type: object
  requesthandler.GetRequestsRequest:
    properties:
      kind:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      status:
        type: string
      userID:
        type: integer
    required:
    - page
    - pageSize
    type: object
  requesthandler.ListRequestResponse:
    properties:
      data:
        $ref: '#/definitions/requesthandler.RequestListData'
      message:
        type: string
      success:
        type: boolean
    type: object
  requesthandler.RequestListData:
    properties:
      items:
        items:
          $ref: '#/definitions/contract.Request'
        type: array
      total:
        type: integer
    type: object
  requesthandler.UpdateRequestStatusRequest:
    properties:
      description:
        type: string
      status:
        enum:
        - pending
        - doing
        - done
        - rejected
        type: string
    required:
    - status
    type: object
  requesthandler.UpdateRequestStatusResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Request'
      message:
        type: string
      success:
        type: boolean
    type: object
  resumehandler.CreateResumeRequest:
    properties:
      file:
        type: string
      introduced_name:
        type: string
      introduced_phone:
        type: string
      position:
        type: string
    required:
    - file
    - introduced_name
    - introduced_phone
    - position
    type: object
  resumehandler.CreateResumeResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Resume'
      message:
        type: string
      success:
        type: boolean
    type: object
  resumehandler.GetResumeResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Resume'
      message:
        type: string
      success:
        type: boolean
    type: object
  resumehandler.ListResumeResponse:
    properties:
      data:
        $ref: '#/definitions/resumehandler.ResumeListData'
      message:
        type: string
      success:
        type: boolean
    type: object
  resumehandler.ResumeListData:
    properties:
      items:
        items:
          $ref: '#/definitions/contract.Resume'
        type: array
      total:
        type: integer
    type: object
  resumehandler.UpdateStatusRequest:
    properties:
      status:
        enum:
        - pending
        - reviewed
        - accepted
        - rejected
        type: string
    required:
    - status
    type: object
  resumehandler.UpdateStatusResponse:
    properties:
      data:
        $ref: '#/definitions/contract.Resume'
      message:
        type: string
      success:
        type: boolean
    type: object
  uploadhandler.PresignedURLData:
    properties:
      url:
        type: string
    type: object
  uploadhandler.PresignedURLResponse:
    properties:
      data:
        $ref: '#/definitions/uploadhandler.PresignedURLData'
      message:
        type: string
      success:
        type: boolean
    type: object
  uploadhandler.UploadDocumentData:
    properties:
      key:
        type: string
    type: object
  uploadhandler.UploadDocumentResponse:
    properties:
      data:
        $ref: '#/definitions/uploadhandler.UploadDocumentData'
      message:
        type: string
      success:
        type: boolean
    type: object
  uploadhandler.UploadImageData:
    properties:
      key:
        type: string
    type: object
  uploadhandler.UploadImageResponse:
    properties:
      data:
        $ref: '#/definitions/uploadhandler.UploadImageData'
      message:
        type: string
      success:
        type: boolean
    type: object
  uploadhandler.UploadPublicImageData:
    properties:
      url:
        type: string
    type: object
  uploadhandler.UploadPublicImageResponse:
    properties:
      data:
        $ref: '#/definitions/uploadhandler.UploadPublicImageData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.AdminLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  userhandler.AdminLoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/userhandler.UserData'
    type: object
  userhandler.GetMeData:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  userhandler.GetMeResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.GetMeData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.ListUsersData:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/userhandler.UserData'
        type: array
    type: object
  userhandler.ListUsersResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.ListUsersData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.RegisterUserData:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  userhandler.RegisterUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role:
        enum:
        - admin
        - employee
        type: string
    required:
    - email
    - first_name
    - last_name
    - phone
    - role
    type: object
  userhandler.RegisterUserResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.RegisterUserData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.RequestOTPRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  userhandler.RequestOTPResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.UpdatePasswordRequest:
    properties:
      password:
        minLength: 8
        type: string
    required:
    - password
    type: object
  userhandler.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.UserData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.UserData:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  userhandler.VerifyOTPData:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/userhandler.VerifyOTPUserData'
    type: object
  userhandler.VerifyOTPRequest:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  userhandler.VerifyOTPResponse:
    properties:
      data:
        $ref: '#/definitions/userhandler.VerifyOTPData'
      message:
        type: string
      success:
        type: boolean
    type: object
  userhandler.VerifyOTPUserData:
    properties:
      avatar:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
info:
  contact:
    email: s.heidari@jabama.com
    name: API Support
    url: http://www.swagger.io/support
  description: This is the backend API for JBM HR system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: JBM HR Backend API
  version: "1.01"
paths:
  /api/v1/admin/albums:
    post:
      consumes:
      - application/json
      description: Create a new album with the provided details (Admin only)
      parameters:
      - description: Album creation details
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/albumhandler.CreateAlbumRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Create a new album
      tags:
      - albums - admin
  /api/v1/admin/albums/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an album by ID (Admin only)
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Delete an album
      tags:
      - albums - admin
    put:
      consumes:
      - application/json
      description: Update an album with the provided details (Admin only)
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Album update details
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/albumhandler.UpdateAlbumRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update an album
      tags:
      - albums - admin
  /api/v1/admin/departments:
    post:
      consumes:
      - application/json
      description: Create a new department in the system (admin only)
      parameters:
      - description: Create Department
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/departmenthandler.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/departmenthandler.CreateDepartmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Create a new department (admin only)
      tags:
      - departments - admin
  /api/v1/admin/departments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a department by its ID (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Delete a department (admin only)
      tags:
      - departments - admin
    put:
      consumes:
      - application/json
      description: Update an existing department in the system (admin only)
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Department
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/departmenthandler.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/departmenthandler.UpdateDepartmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update a department (admin only)
      tags:
      - departments - admin
  /api/v1/admin/hr-team:
    post:
      consumes:
      - application/json
      description: Create a new HR team member in the system (admin only)
      parameters:
      - description: Create HR Team Member
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hrteamhandler.HRTeamInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/hrteamhandler.CreateHRTeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Create a new HR team member (admin only)
      tags:
      - hr-team - admin
  /api/v1/admin/hr-team/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an HR team member by their ID (admin only)
      parameters:
      - description: HR Team Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Delete an HR team member (admin only)
      tags:
      - hr-team - admin
    put:
      consumes:
      - application/json
      description: Update an existing HR team member in the system (admin only)
      parameters:
      - description: HR Team Member ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update HR Team Member
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hrteamhandler.HRTeamInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hrteamhandler.UpdateHRTeamResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update an HR team member (admin only)
      tags:
      - hr-team - admin
  /api/v1/admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate admin user with email and password
      parameters:
      - description: Admin Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.AdminLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Admin login
      tags:
      - users - admin
  /api/v1/admin/requests:
    get:
      consumes:
      - application/json
      description: Get a list of requests with optional filters
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requesthandler.GetRequestsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requesthandler.ListRequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: List requests
      tags:
      - requests - admin
  /api/v1/admin/requests/{id}:
    get:
      consumes:
      - application/json
      description: Get a request by its ID
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requesthandler.GetRequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get a request by ID
      tags:
      - requests - admin
  /api/v1/admin/requests/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of a request
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requesthandler.UpdateRequestStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/requesthandler.UpdateRequestStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update request status
      tags:
      - requests - admin
  /api/v1/admin/resumes:
    get:
      consumes:
      - application/json
      description: Get all resumes
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resumehandler.ListResumeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: List resumes
      tags:
      - resumes - admin
  /api/v1/admin/resumes/{id}:
    get:
      consumes:
      - application/json
      description: Get a resume by ID
      parameters:
      - description: Resume ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resumehandler.GetResumeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get a resume
      tags:
      - resumes - admin
  /api/v1/admin/resumes/{id}/status:
    put:
      consumes:
      - application/json
      description: Update a resume's status
      parameters:
      - description: Resume ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/resumehandler.UpdateStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resumehandler.UpdateStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update resume status
      tags:
      - resumes - admin
  /api/v1/admin/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users in the system (Admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - users - admin
  /api/v1/admin/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.UserData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users - admin
    put:
      consumes:
      - application/json
      description: Update a user's information (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users - admin
  /api/v1/admin/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/contract.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Update user password
      tags:
      - users - admin
  /api/v1/admin/users/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system (Admin only)
      parameters:
      - description: Register User
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/userhandler.RegisterUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - users - admin
  /api/v1/albums:
    get:
      consumes:
      - application/json
      description: Get all albums
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get all albums
      tags:
      - albums
  /api/v1/albums/{id}:
    get:
      consumes:
      - application/json
      description: Get an album by its ID
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/albumhandler.AlbumResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get an album by ID
      tags:
      - albums
  /api/v1/departments:
    get:
      consumes:
      - application/json
      description: Get a paginated list of departments
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/departmenthandler.ListDepartmentsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: List departments
      tags:
      - departments
  /api/v1/departments/{id}:
    get:
      consumes:
      - application/json
      description: Get a department by its ID
      parameters:
      - description: Department ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/departmenthandler.GetDepartmentResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get a department
      tags:
      - departments
  /api/v1/hr-team:
    get:
      consumes:
      - application/json
      description: Get all HR team members
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hrteamhandler.HRTeamListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: List HR team members
      tags:
      - hr-team
  /api/v1/hr-team/{id}:
    get:
      consumes:
      - application/json
      description: Get an HR team member by their ID
      parameters:
      - description: HR Team Member ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hrteamhandler.GetHRTeamResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get an HR team member
      tags:
      - hr-team
  /api/v1/requests:
    post:
      consumes:
      - application/json
      description: Create a new request with the provided details
      parameters:
      - description: Request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requesthandler.CreateRequestRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/requesthandler.CreateRequestResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create a new request
      tags:
      - requests
  /api/v1/resumes:
    post:
      consumes:
      - application/json
      description: Create a new resume
      parameters:
      - description: Resume input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/resumehandler.CreateResumeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/resumehandler.CreateResumeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Create a resume
      tags:
      - resumes
  /api/v1/upload/document:
    post:
      consumes:
      - multipart/form-data
      description: Upload a document file (PDF, DOC, DOCX) to S3 storage
      parameters:
      - description: Document file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandler.UploadDocumentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Upload a document
      tags:
      - upload
  /api/v1/upload/image:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file to S3 storage
      parameters:
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandler.UploadImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Upload an image
      tags:
      - upload
  /api/v1/upload/image/public:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file to public S3 storage
      parameters:
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandler.UploadPublicImageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Upload a public image
      tags:
      - upload
  /api/v1/upload/presigned/{key}:
    get:
      consumes:
      - application/json
      description: Generate a pre-signed URL for accessing a file in S3 storage
      parameters:
      - description: File key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/uploadhandler.PresignedURLResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get a pre-signed URL for a file
      tags:
      - upload
  /api/v1/users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Update user password
      tags:
      - users - admin
  /api/v1/users/me:
    get:
      consumes:
      - application/json
      description: Get the current user's data from the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.GetMeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      security:
      - BearerAuth: []
      summary: Get current user data
      tags:
      - users
  /api/v1/users/request-otp:
    post:
      consumes:
      - application/json
      description: Send OTP to user's email
      parameters:
      - description: Request OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.RequestOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.RequestOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Request OTP
      tags:
      - users
  /api/v1/users/verify-otp:
    post:
      consumes:
      - application/json
      description: Verify OTP and return JWT token and user data if valid
      parameters:
      - description: Verify OTP
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/userhandler.VerifyOTPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userhandler.VerifyOTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Verify OTP
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
